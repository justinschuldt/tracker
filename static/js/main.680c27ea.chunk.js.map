{"version":3,"sources":["data/models/Unit.ts","data/models/Series.ts","data/local-db.ts","components/chart/RecordsDynamicLineChart.tsx","components/chart/ChartDemo.tsx","components/Utils.ts","components/form/SeriesInput.tsx","containers/Landing.tsx","components/form/SeriesSelect.tsx","components/form/UnitSelect.tsx","components/modal/ExportData.tsx","components/table/EditableRow.tsx","components/table/EditableCell.tsx","components/table/SeriesTable.tsx","components/modal/ManageSeries.tsx","containers/SeriesDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Unit","name","timestamp","id","this","Date","toISOString","findOrCreateUnit","db","unitName","a","units","get","unit","iso","add","newUnitId","Series","unitId","records","Promise","all","where","equals","first","toArray","series","version","stores","table","mapToClass","Dexie","RecordsDynamicLineChart","props","useState","setRecords","chart","setChart","F2","Animate","registerAnimation","updateShape","animateCfg","cacheAttrs","attrs","oldPoints","points","newPoints","attr","oldLength","length","deltaLength","lastPoint","i","push","animate","to","duration","easing","useEffect","newChart","Chart","pixelRatio","window","devicePixelRatio","color","lineColor","data2","map","r","amount","Number","source","type","mask","tickCount","range","min","alias","axis","label","text","index","total","textCfg","textAlign","tooltip","showCrosshairs","line","position","shape","update","animation","style","lineWidth","point","stroke","fill","render","record","newRecord","addToChart","display","justifyContent","height","width","changeData","Title","Typography","wait","ms","res","setTimeout","sampleData","ChartDemo","Form","useForm","form","forceUpdate","loading","setLoading","recordIdCounter","setRecordIdCounter","showTryMePopover","setShowTryMePopover","addRecord","recordAmount","recordId","now","setDate","getDate","seriesId","intervalMilliseconds","intervals","undefined","values","animated","firstRecord","demoValues","amountIndex","setFieldsValue","showPopoverDwell","setInterval","clearInterval","showForm","layout","onFinish","resetFields","Item","margin","size","maxWidth","minWidth","bordered","defaultValue","options","value","optionFilterProp","content","visible","rules","required","message","placeholder","shouldUpdate","htmlType","disabled","Boolean","getFieldValue","overlay","className","level","overlayColor","transformToOption","downloadJsonFile","title","data","fileName","dataBlob","Blob","JSON","stringify","document","createElement","href","URL","createObjectURL","download","click","SeriesInput","seriesPlaceholder","setSeriesPlaceholder","unitPlaceholder","setUnitPlaceholder","callback","delay","savedCallback","useRef","current","useInterval","arr","potentialNext","findIndex","s","next","cyclePlaceholder","Landing","history","useHistory","setSeries","loadSeries","allSeries","seriesName","toLocaleLowerCase","newSeries","marginBottom","role","aria-label","minHeight","paddingRight","innerWidth","isFieldsTouched","getFieldsError","filter","errors","marginTop","ghost","Search","Input","SeriesSelect","setOptions","activeSeries","setActiveSeries","newSeriesName","setNewSeriesName","fetchData","activeSeriesId","find","onNameChange","event","target","createSeries","String","newOptions","onChange","dropdownRender","menu","flexWrap","padding","onPressEnter","onSearch","enterButton","PlusOutlined","UnitSelect","newUnitName","setNewUnitName","setUnits","loadUnits","unitsArray","createUnit","newUnit","newUnits","selectionComplete","Text","ExportData","modalVisible","setModalVisible","exportAllData","format","e","exportSeries","exportData","buttonProps","DownloadOutlined","fontSize","onClick","onCancel","footer","icon","FileOutlined","FileExcelOutlined","EditableContext","React","createContext","EditableRow","component","Provider","EditableCell","editable","children","dataIndex","handleSave","restProps","editing","setEditing","inputRef","useContext","focus","toggleEdit","save","validateFields","console","log","childNode","ref","onBlur","formatTimestamp","isoString","toLocaleDateString","weekday","month","day","hour","minute","second","SeriesTable","columns","handleDelete","delete","state","setState","item","row","newData","splice","align","onConfirm","CloseCircleOutlined","count","newRecords","components","body","cell","col","onCell","rowClassName","dataSource","rowKey","Component","ManageSeries","onClose","danger","SettingOutlined","top","MinusCircleOutlined","deleteSeries","SeriesDetails","inputEl","setUnitName","useParams","loadAndSetSeries","seriesClass","loadSeriesData","fetchedRecords","reduce","accum","resetState","findSeries","updatedRecords","updateSeriesWithUnit","paddingTop","spinning","suffix","left","App","exact","path","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.680c27ea.chunk.js","sourcesContent":["import { TrackerDatabase } from '../local-db'\n\nexport interface IUnit {\n    id?: number\n    timestamp: string\n    name: string\n}\n\nexport class Unit {\n    id?: number\n    timestamp: string\n    name: string\n    constructor(name: string, timestamp?: string, id?: number) {\n\n        this.name = name // will always have this prop, instantiating an existing or new row.\n\n        if (id) this.id = id; // if existing data\n        if (timestamp) {\n            this.timestamp = timestamp // if existing data\n        } else {\n            this.timestamp = new Date().toISOString() // if new data\n        }\n    }\n    // is it necessary to override save, since we dont dont need any\n    // async stuff, can do it all in the constructor\n    // save() {\n    //     return db.transaction('rw', db.units, db.series, db.records, async () => {\n    //         console.log('Unit.save() in db.transaction')\n    //         // Add or update ourselves\n    //         if (!this.timestamp) {\n    //             this.timestamp = new Date().toISOString() // if new data\n    //         }\n\n    //         this.id = await db.units.put(this);\n    //     });\n    // }\n}\n\nexport const findOrCreateUnit = async (db: TrackerDatabase, unitName: string): Promise<number> => {\n    // This is a work around\n    let unit = await db.units.get({name: unitName})\n    if (unit && unit.id) {\n        return unit.id\n    }\n    const iso = new Date().toISOString()\n    let newUnitId = await db.units.add({name: unitName, timestamp: iso})\n    return newUnitId\n\n  }\n  ","import { db } from '../local-db'\nimport { IUnit } from './Unit'\nimport { IRecord } from './Record'\n\nexport interface ISeries {\n    id?: number\n    name: string\n    timestamp: string\n    unitId?: IUnit['id']\n}\n\n/* This class that is mapped to the series table.\n * We can have custom helper methods on it that\n * we could call on retrieved database objects.\n * This class is instantiated when users create new objects,\n * and for each row of existing data returned by Dexie.  \n */\nexport class Series {\n    id?: number\n    unitId?: number\n    unitName?: string\n    unit?: IUnit;   \n    records?: IRecord[]\n    \n    constructor(id?: number, unitId?: number) {\n        if (id) this.id = id\n        if (unitId) this.unitId = unitId\n    }\n    \n    // helper method to fetch all the related data\n    async loadSeriesData(): Promise<IRecord[]> {\n        if (!this.id || !this.unitId) {\n            return []\n        }\n        [this.unit, this.records] = await Promise.all([\n            db.units.where('id').equals(this.unitId).first(),\n            db.records.where('seriesId').equals(this.id).toArray() // TODO - order by date\n        ]);\n        return this.records || []\n\n    }\n\n}\n\n","import Dexie from 'dexie'\nimport { IUnit, Unit } from './models/Unit'\nimport { Series, ISeries } from './models/Series'  \nimport { IRecord } from './models/Record'\n\nexport class TrackerDatabase extends Dexie {\n  series: Dexie.Table<ISeries, number>;\n  units: Dexie.Table<IUnit, number>;\n  records: Dexie.Table<IRecord, number>;\n  \n  constructor() {  \n    super(\"TrackerDatabase\");\n    \n    //\n    // Define tables and indexes\n    // (Here's where the implicit table props are dynamically created)\n    //\n    this.version(1).stores({\n      series: '++id, timestamp, name',\n      units: '++id, timestamp, name',\n      records: '++id, timestamp, seriesId, amount',\n    });\n    \n\n    // are these even needed?\n    this.series = this.table<ISeries, number>(\"series\");\n    this.units = this.table(\"units\")\n    this.records = this.table(\"records\");\n\n    // are these even needed?\n    this.series.mapToClass(Series);\n    this.units.mapToClass(Unit)\n  }\n}\n\nexport const db = new TrackerDatabase();\n","import React, { useEffect, useState } from 'react'\nimport F2 from '@antv/f2';\nimport { IRecord } from '../../data/models/Record';\n\ninterface RecordsDynamicLineChartProps {\n  records: IRecord[]\n  height?: number | string\n  width?: number | string\n  lineColor?: string\n}\n\nexport const RecordsDynamicLineChart = (props: RecordsDynamicLineChartProps) => {\n  let [records, setRecords] = useState<IRecord[]>([])\n  let [chart, setChart] = useState<any>()\n\n  F2.Animate.registerAnimation('lineUpdate', function (updateShape: any, animateCfg: any) {\n    const cacheShape = updateShape.get('cacheShape'); // 该动画 shape 的前一个状态\n    const cacheAttrs = cacheShape.attrs; // 上一个 shape 属性\n    const oldPoints = cacheAttrs.points; // 上一个状态的关键点\n    const newPoints = updateShape.attr('points'); // 当前 shape 的关键点\n\n    const oldLength = oldPoints.length;\n    const newLength = newPoints.length;\n    const deltaLength = newLength - oldLength;\n\n    const lastPoint = newPoints[newPoints.length - 1];\n    for (let i = 0; i < deltaLength; i++) {\n      oldPoints.push(lastPoint);\n    }\n\n    updateShape.attr(cacheAttrs);\n    updateShape.animate().to({\n      attrs: {\n        points: newPoints\n      },\n      duration: 2000,\n      easing: animateCfg.easing\n    });\n  });\n\n\n  useEffect(() => {\n    if (!chart) {\n      const newChart = new F2.Chart({\n        id: 'mountNode',\n        pixelRatio: window.devicePixelRatio\n      });\n  \n      const defs = {\n        timestamp: {\n          type: 'timeCat',\n          mask: 'MM/DD',\n          tickCount: 3,\n          range: [0, 1]\n        },\n        amount: {\n          tickCount: 5,\n          min: 0,\n          alias: 'amount' // TODO - use unit name here\n        }\n      };\n      const color = props.lineColor ? props.lineColor : '#fff'\n      const data2 = props.records.map(r => ({ ...r, amount: Number(r.amount) }))\n      setRecords(data2)\n      newChart.source(data2, defs);\n\n      newChart.axis('time', {\n        label: function label(text: any, index: any, total: any) {\n          const textCfg: { textAlign?: string } = {};\n          if (index === 0) {\n            textCfg.textAlign = 'left';\n          } else if (index === total - 1) {\n            textCfg.textAlign = 'right';\n          }\n          return textCfg;\n        }\n      });\n      newChart.tooltip({\n        showCrosshairs: true\n      });\n      newChart.line().position('timestamp*amount').shape('smooth').animate({\n        update: {\n          animation: 'lineUpdate'\n        }\n      }).color(color)\n      .style({\n        lineWidth: 3\n      })\n  \n      newChart.point().position('timestamp*amount').shape('smooth')\n        .style({\n          stroke: color,\n          fill: color,\n          lineWidth: 1,\n  \n        });\n      newChart.render();\n  \n      setChart(newChart)\n\n    }\n  }, [props.lineColor, props.records, chart]);\n\n  function addToChart(record: IRecord) {\n    const newRecord = { ...record, amount: Number(record.amount) }\n    setRecords(r => [...r, newRecord])\n  }\n  useEffect(() => {\n    const lastRecord = props.records[props.records.length - 1]\n    addToChart(lastRecord)\n  }, [props.records])\n\n  return (\n    <div id=\"container\"  style={{ display: 'flex', justifyContent: 'center' }}>\n      <canvas\n        id=\"mountNode\"\n        height={props.height}\n        width={props.width}\n      />\n      {chart && records ? (chart.changeData(records)) : null}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Input, Form, Button, Select, Popover, Typography } from 'antd'\nimport { IRecord } from '../../data/models/Record'\nimport { RecordsDynamicLineChart } from './RecordsDynamicLineChart'\nimport './ChartDemo.less'\nconst { Title } = Typography;\n\n// helper function, async pause\nconst wait = (ms: number) => new Promise(res => setTimeout(res, ms))\n\n// data for chart-updating demo\nconst sampleData = [0.5, 4, 1.5, 7]\n\ninterface ChartDemoProps {\n    height?: number | string\n    width?: number | string\n    showForm?: boolean\n    values?: number[]\n    lineColor?: string\n    overlay?: string\n    overlayColor?: string\n    animated?: boolean\n}\nexport const ChartDemo = (props: ChartDemoProps) => {\n    const [form] = Form.useForm();\n    const [, forceUpdate] = useState()\n    const [loading, setLoading] = useState<boolean>(false)\n    const [records, setRecords] = useState<IRecord[]>([])\n    const [recordIdCounter, setRecordIdCounter] = useState<number>(0)\n    const [showTryMePopover, setShowTryMePopover] = useState<boolean>(false)\n\n    const addRecord = (recordAmount: number, recordId: number) => {\n        // creates a  record object and adds it to state.\n        // created to be used in a map function, recordId is the index\n        const now = new Date()\n        now.setDate( now.getDate() + recordId );\n        const newRecord = {\n            id: recordId,\n            seriesId: 1,\n            timestamp: now.toISOString(),\n            amount: recordAmount\n        }\n        setRecords(r =>[...r, newRecord])\n        const newRecordId = recordId + 1\n        setRecordIdCounter(newRecordId)\n    }\n    useEffect(() => {\n        // TODO - find how to move this function elsewhere.\n        // currently here to fix eslint: react-hooks/exhaustive-deps\n        const mockedInteractionDemo = (intervalMilliseconds: number) =>\n            (recordAmount: number, amountIndex: number) =>\n                setTimeout(async () => {\n                    // this function modifies state to mock user interaction.\n                    const recordId = amountIndex + 1\n                    // type the number into the form\n                    form.setFieldsValue({ amount: recordAmount })\n                    await wait(800)\n\n                    // press submit, loading symbol shows\n                    setLoading(true)\n                    addRecord(recordAmount, recordId)\n                    await wait(600)\n\n                    // clear loading, clear form value\n                    form.setFieldsValue({ amount: undefined })\n                    setLoading(false)\n                }, (intervalMilliseconds * (amountIndex + 1)))\n        forceUpdate({}) // to disable form button\n\n        let intervals: NodeJS.Timeout[] | undefined = undefined\n        const values = props.values && props.values.length >= 1 ? props.values : sampleData\n        if (props.animated === true) {\n            const demoCycleMilliseconds = 4000\n            const [firstRecord, ...demoValues] = values\n            addRecord(firstRecord, 0) // \n            intervals = demoValues.map(mockedInteractionDemo(demoCycleMilliseconds))\n    \n            // show \"Try me!\" popover after all the mockedInteractionDemos\n            const showPopoverDwell = values.length * demoCycleMilliseconds\n            intervals.push(setInterval(() => setShowTryMePopover(true), showPopoverDwell))\n        } else {\n            values.map(addRecord)\n        }\n\n        return function cleanup() {\n            if (intervals) {\n                intervals.map(clearInterval) // use utils.ts useInterval?\n            }\n        }\n    }, [form, props.animated, props.values])\n\n\n    const onFinish = (values: { amount?: string }) => {\n        // form submission - create a new record, add it to state for chart\n        if (!values.amount) {\n            return // shouldn't happen. for TS\n        }\n        addRecord(Number(values.amount), recordIdCounter)\n        form.resetFields()\n        // hide call to action popover, since they did it.\n        setShowTryMePopover(false)\n    };\n    return (\n        <>\n            {props.showForm ? (\n                <Form\n                    form={form}\n                    name=\"demo_flow\"\n                    layout=\"inline\"\n                    style={{ display: 'flex', justifyContent: 'center' }}\n                    onFinish={onFinish}\n                >\n                    <Form.Item\n                        name=\"seriesName\"\n                        style={{ margin: '0 8px' }}\n                    >\n                        <Select\n                            size=\"small\"\n                            style={{ maxWidth: 160, minWidth: 120 }}\n                            bordered={false}\n                            defaultValue=\"running\"\n                            options={[{ label: 'running', value: '1' }]}\n                            optionFilterProp=\"children\"\n\n                        />\n                    </Form.Item>\n                    <Popover\n                        content=\"Try me!\"\n                        visible={showTryMePopover}\n                    >\n                        <Form.Item\n                            name=\"amount\"\n                            rules={[{ required: true, message: 'required' }]}\n                            style={{ maxWidth: 70, margin: '0 8px' }}\n                        >\n                            <Input\n                                type=\"number\"\n                                size=\"small\"\n                                placeholder={\"miles\"}\n                            />\n                        </Form.Item>\n                    </Popover>\n                    <Form.Item shouldUpdate={true} style={{ margin: '0 8px' }}>\n                        {() => (\n                            <Button\n                                size=\"small\"\n                                type=\"primary\"\n                                shape=\"round\"\n                                htmlType=\"submit\"\n                                loading={loading}\n                                disabled={\n                                    loading ||\n                                    !Boolean(form.getFieldValue('amount'))\n                                }\n                            >\n                                Log\n                            </Button>\n                        )}\n                    </Form.Item>\n                </Form>\n\n            ) : null}\n            {/* if records in state, show. else show placeholder. */}\n            {records && records.length >= 1 ?\n                <div id=\"overlay-container\">\n                    <RecordsDynamicLineChart\n                        records={records}\n                        height={props.height}\n                        width={props.width}\n                        lineColor={props.lineColor}\n                    />\n                    {props.overlay ? (\n                        <div id=\"overlay\" className=\"overlay-flex-container\" >\n                            <Typography >\n                                <Title level={4} style={{ color: props.overlayColor }} >\n                                    {props.overlay}\n                                </Title>\n                            </Typography>\n                        </div>\n                    ) : null}\n                </div>\n                : null\n            }\n        </>\n    )\n}","import { useEffect, useRef } from 'react'\nimport { ISeries } from '../data/models/Series'\nimport { IUnit } from '../data/models/Unit'\n\nexport interface IOption {\n    label: string | JSX.Element\n    value: string | number\n  }\n  \n  export function transformToOption({name, id}: ISeries | IUnit): IOption  {\n    return {\n      label: name, \n      value: Number(id)\n    }\n  }\n\n  export function useInterval(callback: () => void, delay: number) {\n    const savedCallback = useRef<() => void>();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        if (savedCallback && savedCallback.current) {\n            savedCallback.current()\n        }\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  export const downloadJsonFile = (title: string, data: any) => {\n    const timestamp = new Date().toISOString()\n    const fileName = `${title}_${timestamp}.json`;\n    const dataBlob = new Blob(\n      [JSON.stringify(data,undefined,2)],\n      { type:`application/json` }\n      ) \n      const a = document.createElement('a');\n      a.href = URL.createObjectURL(dataBlob);\n      a.download = fileName\n      a.click();\n  }","import React, { Fragment, useState } from 'react'\nimport { Form, Input } from 'antd'\nimport { useInterval } from '../Utils'\n\nexport const sampleData: [string, string][] = [\n    ['running', 'miles'],\n    ['coffee consumption', 'cups'],\n    ['pushups', 'reps'],\n    ['alcohol', 'drinks'],\n    ['meditation', 'minutes'],\n    ['snacks eaten', 'serving'],\n    ['anerobic exercise', 'minutes'],\n    ['TV watched', 'hours'],\n    ['walking', 'miles'],\n]\nexport const SeriesInput = () => {\n    // this component is a form  with two inputs.\n    // sets of placeholder values cycle on a regular interval.\n    // placeholder values are held in state, cycled by \"useInterval\" hook.\n    const [seriesPlaceholder, setSeriesPlaceholder] = useState<string>(sampleData[0][0])\n    const [unitPlaceholder, setUnitPlaceholder] = useState<string>(sampleData[0][1])\n\n    const cyclePlaceholder = (arr: [string, string][]) => {\n        const currIndex = arr.findIndex(s => s[0] === seriesPlaceholder)\n        const potentialNext = currIndex + 1\n\n        if (potentialNext >= arr.length) {\n            // reached end of array, start from beginning\n            setSeriesPlaceholder(arr[0][0])\n            setUnitPlaceholder(arr[0][1])\n            return\n        }\n        const next = arr[potentialNext]\n        setSeriesPlaceholder(next[0])\n        setUnitPlaceholder(next[1])\n    }\n\n    useInterval(() => {\n        cyclePlaceholder(sampleData)\n    }, 3000)\n\n    return (\n        <Fragment>\n            <Form.Item\n                name=\"seriesName\"\n                rules={[{ required: true, message: 'Please input something' }]}\n                style={{ width: 110, margin: '0 8px' }}\n            >\n                <Input\n                    size=\"small\"\n                    placeholder={seriesPlaceholder}\n                />\n            </Form.Item>\n            <Form.Item\n                name=\"unitName\"\n                rules={[{ required: true, message: 'Please input something' }]}\n                style={{ width: 90, margin: '0 8px' }}\n            >\n                <Input\n                    size=\"small\"\n                    placeholder={unitPlaceholder}\n                />\n            </Form.Item>\n        </Fragment>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Button, Typography, Form, } from 'antd';\nimport { useHistory, Link } from 'react-router-dom'\nimport { db } from '../data/local-db'\nimport { ChartDemo } from '../components/chart/ChartDemo'\nimport { SeriesInput } from '../components/form/SeriesInput'\nimport { findOrCreateUnit } from '../data/models/Unit';\nimport './Landing.less'\nimport { ISeries } from '../data/models/Series';\nconst { Title } = Typography;\n\nconst Landing = () => {\n    const [form] = Form.useForm();\n    const history = useHistory()\n    const [, forceUpdate] = useState()\n    const [series, setSeries] = useState<ISeries[]>([])\n\n    const loadSeries = async () => {\n        const allSeries = await db.series.toArray()\n        setSeries(allSeries)\n    }\n\n    useEffect(() => {\n        forceUpdate({}) // force form validation to disable submit button\n        loadSeries() // load series for link to SeriesDetails logic\n    }, [])\n\n    const onFinish = async (values: { seriesName?: string, unitName?: string }) => {\n        if (!values.seriesName || !values.unitName) {\n            return // shouldn't happen. for TS\n        }\n        const unitName = values.unitName.toLocaleLowerCase()\n        const unitId = await findOrCreateUnit(db, unitName)\n        const newSeries = {\n            name: values.seriesName.toLocaleLowerCase(),\n            timestamp: new Date().toISOString(),\n            unitId\n        }\n        const seriesId = await db.series.add(newSeries)\n        history.push(`/${seriesId}`)\n    }\n\n    return (\n        <>\n            <div style={{ margin: '1em 0' }}>\n                    <Typography>\n                        <div className=\"indent\" >\n                            <Title level={2} style={{ marginBottom: '0.2em' }}>simple habit tracking</Title>\n                        </div>\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <div style={{display: 'block', justifyContent: 'left'}}>\n                                <div>\n                                    <span className=\"emoji\" role=\"img\" aria-label=\"woman scientist\">👩‍🔬</span>\n                                    {` `}\n                                    decide what you want to track\n                                </div>\n                                <div>\n                                    <span className=\"emoji\" role=\"img\" aria-label=\"clipboard\">📋</span>\n                                    {` `}\n                                    use this app to log data\n                                </div>\n                                <div>\n                                    <span className=\"emoji\" role=\"img\" aria-label=\"chart upwards\">📈</span>\n                                    {` `}\n                                    see charts about your behavior\n                                </div>\n                            </div>\n                        </div>\n                    </Typography>\n            </div>\n\n            <div style={{ margin: '1em 0' }}>\n                <div className=\"indent\">\n                    <Typography>\n                        <Title level={2} style={{ marginBottom: '0.2em' }}>log data, see trends</Title>\n                        <div className=\"indent\">\n                            <Title level={4}>looks like this:</Title>\n                        </div>\n                    </Typography>\n\n                </div>\n                <div style={{ minHeight: 200, paddingRight: '2em' }}>\n                    <ChartDemo\n                        height={170}\n                        width={window.innerWidth*0.8}\n                        showForm\n                        animated\n                        lineColor={\"rgba(6, 85, 231, .6)\"}\n                        overlay={'DEMO'}\n                        overlayColor={'rgba(240, 240, 240, .3)'}\n                    />\n                </div>\n            </div>\n\n            <div style={{ margin: '1em 0' }}>\n                <div className=\"indent\">\n                    <Typography>\n                        <Title level={2} style={{ marginBottom: '0.2em' }}>get started</Title>\n                        <div className=\"indent\">\n                            <Title level={4}>what do you want to track?</Title>\n                        </div>\n                    </Typography>\n                </div>\n                <Form\n                    form={form}\n                    name=\"landing_series_creation\"\n                    layout=\"inline\"\n                    style={{display: 'flex', justifyContent: 'center'}}\n                    onFinish={onFinish}\n                >\n                    <SeriesInput />\n                    <Form.Item shouldUpdate={true} style={{ margin: '0 8px' }}>\n                        {() => (\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                size=\"small\"\n                                shape=\"round\"\n                                disabled={\n                                    !form.isFieldsTouched(true) ||\n                                    Boolean(form.getFieldsError().filter(({ errors }) => errors.length).length)\n                                }\n                            >\n                                Start\n                            </Button>\n                        )}\n                    </Form.Item>\n                </Form>\n            </div>\n            {series && series[0] && series[0].id ? (\n                // for returning users\n                <div style={{ marginTop: 24, display: 'flex', justifyContent: 'center' }}>\n                    {/* show a link to SeriesDetails, incase an existing user ends up here */}\n                    <Button type=\"primary\" ghost style={{width: '70%'}}>\n                        <Link to={`/${series[0].id}`} >Go to your records</Link>\n                    </Button>\n                </div>\n            ) : null}\n        </>\n    )\n}\nexport default Landing","import React, { useState, useEffect } from 'react'\nimport { Form, Select, Input, Divider } from 'antd'\nimport { PlusOutlined } from '@ant-design/icons'\nimport { db } from '../../data/local-db'\nimport { ISeries } from '../../data/models/Series'\nimport { useHistory } from 'react-router-dom'\nimport { IOption, transformToOption } from '../Utils'\nimport { FormInstance } from 'antd/lib/form'\nconst { Search } = Input\n\ninterface SeriesSelectProps {\n  activeSeries?: number\n  form: FormInstance\n  width: number | string\n}\nconst SeriesSelect = (props: SeriesSelectProps) => {\n  const [series, setSeries] = useState<ISeries[]>([])\n  const [options, setOptions] = useState<IOption[]>([])\n  const [activeSeries, setActiveSeries] = useState<ISeries>()\n  const [newSeriesName, setNewSeriesName] = useState()\n\n  let history = useHistory()\n\n  useEffect(() => {\n    if (props.activeSeries) {\n      // reset state \n      setActiveSeries(undefined)\n      props.form.resetFields()\n\n      //  fetch data and set to state\n      fetchData(props.activeSeries)\n    }\n  }, [props.activeSeries, props.form])\n\n  const fetchData = async (activeSeriesId: number) => {\n    const series = await db.series.toArray()\n    setSeries(series)\n\n    const options = series.map(transformToOption)\n\n    const activeSeries = series.find(s => s.id === activeSeriesId)\n\n    if (activeSeries) {\n      setActiveSeries(activeSeries)\n    }\n    setOptions(options)\n  }\n\n  function onChange(value: string) {\n    history.push(`/${value}`)\n  }\n  const onNameChange = (event: any) => {\n    setNewSeriesName(event.target.value)\n  };\n\n  const createSeries = async () => {\n    if (newSeriesName) {\n      // add to db\n      const timestamp = new Date().toISOString()\n      const name = String(newSeriesName).toLocaleLowerCase()\n      const id = await db.series.add({ name, timestamp })\n      const newSeries = [...series, { id, name, timestamp }]\n      setSeries(newSeries)\n      const newOptions = newSeries.map(transformToOption)\n      setOptions(newOptions)\n      setActiveSeries({ id, name, timestamp })\n      setNewSeriesName(undefined) // clear the input\n      props.form.setFieldsValue({ seriesId: id })\n      history.push(`/${id}`)\n    }\n  };\n\n  return (\n    options && options.length >= 1 ? (\n      <Form.Item\n        name=\"seriesId\"\n        style={{ margin: '0 4px 0 0' }}\n        \n      >\n        <Select\n          size=\"small\"\n          style={{ width: props.width }}\n          bordered={false}\n          onChange={onChange}\n          options={options}\n          value={String(activeSeries?.id)}\n          defaultValue={String(activeSeries?.name)}\n          dropdownRender={menu => (\n            <div>\n              {menu}\n              <Divider style={{ margin: '4px 0' }} />\n              <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n                <Search\n                  size=\"small\"\n                  value={newSeriesName}   // keep value in state for submit/clear\n                  onChange={onNameChange} // updates state with form value\n                  placeholder=\"meditation\"\n                  onPressEnter={createSeries} // enter key pressed\n                  onSearch={createSeries}     // \"+\" button clicked\n                  enterButton={<PlusOutlined />}\n                />\n              </div>\n            </div>\n          )}\n        />\n      </Form.Item>\n\n    ) : <div style={{ width: props.width }}></div> // preserve layout while loading\n  )\n}\n\nexport default SeriesSelect\n","import React, { useState, useEffect } from 'react'\nimport { Select, Divider, Input, Form } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { IUnit } from '../../data/models/Unit';\nimport { db } from '../../data/local-db'\nimport { IOption, transformToOption } from '../Utils';\nconst { Search } = Input\n\ninterface UnitSelectProps {\n  width: number | string\n  selectionComplete: (props: { name: string, id: number }) => void\n}\nexport const UnitSelect = (props: UnitSelectProps) => {\n  const [newUnitName, setNewUnitName] = useState()\n  const [options, setOptions] = useState<IOption[]>([])\n  const [units, setUnits] = useState<IUnit[]>([])\n\n  useEffect(() => {\n    loadUnits()\n  }, [])\n\n  const loadUnits = async () => {\n    const unitsArray = await db.units.toArray()\n    const options = unitsArray.map(transformToOption)\n    setUnits(unitsArray)\n    setOptions(options)\n  }\n  const unitSelected = (unitId: number) => {\n    const unit = units.find(unit => unit.id === unitId)\n    if (unit) {\n      props.selectionComplete({ ...unit, id: unitId })\n    }\n  }\n\n  const onNameChange = (event: any) => {\n    setNewUnitName(event.target.value)\n  };\n\n  const createUnit = async () => {\n    if (newUnitName) {\n      // add to db\n      const iso = new Date().toISOString()\n      const newUnit = {\n        name: String(newUnitName).toLocaleLowerCase(),\n        timestamp: iso,\n      }\n      let newUnitId = await db.units.add(newUnit)\n      const unit = { ...newUnit, id: newUnitId }\n      const newUnits = [...units, unit]\n      const newOptions = newUnits.map(transformToOption)\n      setUnits(newUnits)\n      setOptions(newOptions)\n      setNewUnitName(undefined) // clear the input\n      props.selectionComplete(unit)\n    }\n  };\n\n  return (\n    <Form.Item\n      name=\"unit\"\n      rules={[{ required: true, message: 'Please choose a unit' }]}\n      style={{ margin: '0 4px' }}\n    >\n      <Select\n        size=\"small\"\n        style={{ width: props.width }}\n        placeholder=\"unit\"\n        onChange={unitSelected}\n        dropdownRender={menu => (\n          <div>\n            {menu}\n            <Divider style={{ margin: '4px 0' }} />\n            <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n\n              <Search\n                size=\"small\"\n                value={newUnitName}      // keep value in state for submit/clear\n                onChange={onNameChange}  // updates state with form value\n                placeholder=\"session\"\n                onPressEnter={createUnit} // enter key pressed\n                onSearch={createUnit}     // \"+\" button clicked\n                enterButton={<PlusOutlined />}\n              />\n            </div>\n          </div>\n        )}\n        options={options}\n      />\n    </Form.Item>\n  );\n\n}","import React, { useState } from 'react'\nimport { Button, Modal, Typography } from 'antd'\nimport {\n  DownloadOutlined,\n  FileExcelOutlined,\n  FileOutlined,\n} from '@ant-design/icons'\nimport { ISeries } from '../../data/models/Series'\nimport { IRecord } from '../../data/models/Record'\nimport { downloadJsonFile } from '../Utils'\nimport { db } from '../../data/local-db'\nimport { IUnit } from '../../data/models/Unit'\n\nconst { Title, Text } = Typography\n\ninterface ExportDataProps {\n  series?: ISeries\n  records?: IRecord[]\n}\nexport const ExportData = (props: ExportDataProps) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false)\n\n  const exportAllData = (format: 'json' | 'csv') => async (e: any) => {\n    const units = await db.units.toArray()\n    const series = await db.series.toArray()\n    const records = await db.records.toArray()\n    const exportData = { units, series, records }\n    downloadJsonFile('full-data-export', exportData)\n  }\n\n  const exportSeries = (format: 'json' | 'csv', series: ISeries, records: IRecord[]) =>\n    async (e: any) => {\n      let unit: IUnit | undefined = undefined\n      if (series.unitId) {\n        unit = await db.units.where('id').equals(series.unitId).first()\n      }\n      const exportData = { series, records, unit }\n      downloadJsonFile(series.name, exportData)\n    }\n  const buttonProps = {\n    style: { margin: '4px' },\n    type: \"primary\" as any,\n    size: \"small\" as any,\n    shape: \"round\" as any\n  }\n  return (\n    <div>\n      <DownloadOutlined style={{ fontSize: 22 }} onClick={() => setModalVisible(true)} />\n      <Modal\n        title={<Title level={4} style={{ margin: 0 }}>export data</Title>}\n        visible={modalVisible}\n        onCancel={() => setModalVisible(false)}\n        footer={null}\n      >\n        <div>\n          <Typography>\n            <Title level={4} style={{ margin: 0 }}>all your data</Title>\n            <Text className=\"indent\">export as:</Text>\n          </Typography>\n          <div className=\"indent\">\n            <div className=\"indent\">\n              <Button\n                type=\"primary\"\n                {...buttonProps}\n                onClick={exportAllData('json')}\n                icon={<FileOutlined />}\n              >\n                json\n                  </Button>\n              <Button\n                type=\"primary\"\n                {...buttonProps}\n                onClick={exportAllData('csv')}\n                icon={<FileExcelOutlined />}\n                disabled // TODO\n              >\n                spreadsheet\n                  </Button>\n            </div>\n          </div>\n        </div>\n        {props.series && props.records ? (\n          <div style={{ marginTop: 16 }}>\n            <Typography>\n              <Title level={4} style={{ margin: 0 }}>{props.series.name} data</Title>\n              <Text className=\"indent\">export as:</Text>\n            </Typography>\n            <div className=\"indent\">\n              <div className=\"indent\">\n                <Button\n                  type=\"primary\"\n                  {...buttonProps}\n                  onClick={exportSeries('json', props.series, props.records)}\n                  icon={<FileOutlined />}\n                >\n                  json\n                    </Button>\n                <Button\n                  type=\"primary\"\n                  {...buttonProps}\n                  onClick={exportSeries('csv', props.series, props.records)}\n                  icon={<FileExcelOutlined />}\n                  disabled // TODO\n                >\n                  spreadsheet\n                    </Button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </Modal>\n    </div>\n  )\n}","import React from 'react';\nimport { Form } from 'antd';\n// TODO - better typing\nexport const EditableContext = React.createContext<any>(undefined);\n\ninterface EditableRowProps {\n    index: number;\n}\n  \nexport const EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    )\n}","import React, {\n    useContext,\n    useState,\n    useEffect,\n    useRef\n} from 'react';\nimport { Input, Form } from 'antd';\nimport { EditableContext } from './EditableRow'\nimport { SeriesTableRecord } from './SeriesTable'\n\n\ninterface EditableCellProps {\n    title: React.ReactNode;\n    editable: boolean;\n    children: React.ReactNode;\n    dataIndex: keyof SeriesTableRecord;\n    record: SeriesTableRecord;\n    handleSave: (record: SeriesTableRecord) => void;\n}\n  \nexport const EditableCell: React.FC<EditableCellProps> = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    ...restProps\n  }) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef<Input>(null);\n    const form = useContext(EditableContext);\n  \n    useEffect(() => {\n      if (editing && inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, [editing]);\n  \n    const toggleEdit = () => {\n      setEditing(!editing);\n      form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n    };\n  \n    const save = async (e: any) => {\n      try {\n        const values = await form.validateFields();\n  \n        toggleEdit();\n        handleSave({ ...record, ...values });\n      } catch (errInfo) {\n        console.log('Save failed:', errInfo);\n      }\n    };\n  \n    let childNode = children;\n  \n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{ margin: 0, maxWidth: 50 }}\n          name={dataIndex}\n          rules={[\n            {\n              required: true,\n              message: `✏☝`,\n            },\n          ]}\n        >\n          <Input\n            ref={inputRef}\n            onPressEnter={save}\n            onBlur={save}\n          />\n        </Form.Item>\n      ) : (\n        <div\n            className=\"editable-cell-value-wrap\"\n            onClick={toggleEdit}\n        >\n            {children}\n        </div>\n      );\n    }\n  \n    return <td {...restProps}>{childNode}</td>;\n  };\n","import React, { Component } from 'react';\nimport { Table, Popconfirm, } from 'antd';\nimport { CloseCircleOutlined } from '@ant-design/icons'\nimport { ISeries } from '../../data/models/Series';\nimport { IRecord } from '../../data/models/Record';\nimport { ColumnType } from 'antd/lib/table/interface'\nimport { EditableCell } from './EditableCell'\nimport { EditableRow } from './EditableRow'\nimport { db } from '../../data/local-db'\n\nexport interface SeriesTableRecord extends IRecord {\n  id: number;\n}\n\ninterface EditableColumnType<RecordType> extends ColumnType<RecordType> {\n    editable?: boolean\n}\ninterface EditableTableProps {\n    series: ISeries\n    records: IRecord[]\n}\ninterface EditableTableState {\n    records: SeriesTableRecord[]\n    count: number\n}\nconst formatTimestamp = (isoString: string): string => {\n    const date = new Date(isoString)\n    var options = {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n    }\n    return date.toLocaleDateString(undefined, options)\n}\n\n\n// TODO - convert to function, use hooks\n// make this more tightly coupled to the data - less local state.\nexport class SeriesTable extends Component<EditableTableProps, EditableTableState> {\n  // This component holds records in state, renders a table of records\n  // update/delete actions are performed on the DB store, then state is updated.\n    columns: EditableColumnType<SeriesTableRecord>[]\n  constructor(props: EditableTableProps) {\n    super(props);\n    this.columns = [\n      {\n        title: 'timestamp',\n        dataIndex: 'timestamp',\n        render: formatTimestamp\n      },\n      {\n        title: 'amount', // TODO - change to unitName? miles, reps, etc.\n        dataIndex: 'amount',\n        editable: true,\n      },\n      {\n        title: '',\n        dataIndex: 'operation',\n        align: 'center',\n        render: (text, record) =>\n            <Popconfirm\n                title=\"Are you sure?\"\n                onConfirm={() => this.handleDelete(record.id)}>\n              <CloseCircleOutlined className=\"danger\" style={{fontSize: 18, color: '#ff4d4f'}}/>\n            </Popconfirm>\n      },\n    ];\n\n    this.state = {\n      records: [],\n      count: 0,\n    };\n  }\n  componentDidMount() {\n      const newRecords  = this.props.records.map(r => ({ ...r, id: Number(r.id)}))\n      this.setState(() => ({\n          records: newRecords as SeriesTableRecord[],\n          count: newRecords.length\n      }))\n  }\n\n  handleDelete = async (id: number) => {\n    // remove record from data store\n    await db.records.delete(id)\n    // remove record from local state\n    const data = [...this.state.records];\n    this.setState({ records: data.filter(item => item.id !== id) });\n  };\n\n  handleSave = async (row: SeriesTableRecord) => {\n    // remove record from data store\n    await db.records.update(row.id, {amount: row.amount})\n    // remove record from local state\n    const newData = [...this.state.records];\n    const index = newData.findIndex(item => row.id === item.id);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n\n    this.setState({ records: newData });\n  };\n\n  render() {\n    const { records } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: (record: SeriesTableRecord)  => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    }) as ColumnType<SeriesTableRecord>[] // TODO - better type\n    return (\n        <Table\n            size=\"small\"\n            components={components}\n            rowClassName={() => 'editable-row'}\n            bordered\n            dataSource={records}\n            rowKey=\"id\"\n            columns={columns}\n        />\n    );\n  }\n}\n","import React, { useState } from 'react'\nimport { Button, Modal, Typography, Divider, Popconfirm} from 'antd'\nimport {\n    CloseCircleOutlined,\n    MinusCircleOutlined,\n    SettingOutlined\n} from '@ant-design/icons'\nimport { ISeries } from '../../data/models/Series'\nimport { IRecord } from '../../data/models/Record'\nimport { SeriesTable } from '../table/SeriesTable'\nimport { db } from '../../data/local-db'\n\nconst { Title, Text } = Typography\n\ninterface ManageSeriesProps {\n    series: ISeries\n    records?: IRecord[]\n    onClose?: () => void\n}\nexport const ManageSeries = (props: ManageSeriesProps) => {\n    const [modalVisible, setModalVisible] = useState<boolean>(false)\n\n    const deleteSeries = (series: ISeries) => async (e: any) => {\n        if (!series.id) {\n            return\n        }\n        await db.records.where('seriesId').equals(series.id).delete()\n        await db.series.delete(series.id)\n\n        onClose()\n    }\n    const deleteRecords = (series: ISeries) => async (e: any) => {\n        if (!series.id) {\n            return\n        }\n        await db.records.where('seriesId').equals(series.id).delete()\n        onClose()\n    }\n    const onClose = () => {\n        if (props.onClose) {\n            props.onClose() // TEMP callback\n        }\n        setModalVisible(false)\n    }\n    const buttonProps = {\n        style: { margin: '4px' },\n        danger: true,\n        size: \"small\" as any,\n        shape: \"round\" as any\n    }\n    return (\n        <div>\n            <SettingOutlined\n                style={{ fontSize: 22 }}\n                onClick={() => setModalVisible(true)}\n            />\n            <Modal\n                title={\n                    <Title level={4} style={{ margin: 0 }}>\n                        manage {props.series.name} data\n                    </Title>\n                }\n                visible={modalVisible}\n                onCancel={onClose}\n                footer={null}\n                style={{ top: 20 }} // keyboard is needed, so move content up\n            >\n                <div>\n                    {props.records && props.records.length >= 1 ? (\n                        <>\n                            <div>\n                                <Typography>\n                                    <Title level={4}>edit/delete records</Title>\n                                </Typography>\n                                <SeriesTable\n                                    series={props.series}\n                                    records={props.records}\n                                />\n                            </div>\n                            <Divider style={{ marginTop: 0 }} />\n                            <div>\n                                <Typography>\n                                    <Title level={4} style={{ margin: 0 }}>\n                                        clear all records\n                                    </Title>\n                                    <Text className=\"indent\">\n                                        erase records, start fresh\n                                    </Text>\n                                </Typography>\n                                <div className=\"indent\">\n                                    <div className=\"indent\">\n                                        <Popconfirm\n                                            title=\"Are you sure?\"\n                                            onConfirm={deleteRecords(props.series)}\n                                        >\n                                            <Button\n                                                className=\"indent\"\n                                                {...buttonProps}\n                                                icon={<MinusCircleOutlined />}\n                                            >\n                                                delete records\n                                            </Button>\n                                        </Popconfirm>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <Divider style={{ margin: '16px 0' }} />\n                        </>\n                    ) : null}\n                    <div >\n                        <Typography>\n                            <Title level={4} style={{ margin: 0 }}>\n                                stop tracking {props.series.name}\n                            </Title>\n                            <Text className=\"indent\">\n                                erase {props.series.name} and any records you've created\n                            </Text>\n                        </Typography>\n                        <div className=\"indent\">\n                            <div className=\"indent\">\n                                <Popconfirm\n                                    title=\"Are you sure?\"\n                                    onConfirm={deleteSeries(props.series)}\n                                >\n                                    <Button\n                                        {...buttonProps}\n                                        icon={<CloseCircleOutlined />}\n                                    >\n                                        delete {props.series.name}\n                                    </Button>\n                                </Popconfirm>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal>\n        </div>\n    )\n}","import React, { useState, useEffect, useRef } from 'react'\nimport { useParams, useHistory } from \"react-router-dom\"\nimport { Form, Input, Button, Typography, Spin } from 'antd';\nimport { db } from '../data/local-db'\nimport { RecordsDynamicLineChart } from '../components/chart/RecordsDynamicLineChart'\nimport SeriesSelect from '../components/form/SeriesSelect'\nimport { Series, ISeries } from '../data/models/Series';\nimport { IRecord } from '../data/models/Record'\n\nimport { UnitSelect } from '../components/form/UnitSelect';\nimport { ChartDemo } from '../components/chart/ChartDemo';\nimport { ExportData } from '../components/modal/ExportData';\nimport { ManageSeries } from '../components/modal/ManageSeries'\n\nconst { Title } = Typography\n\nconst SeriesDetails = () => {\n    const inputEl = useRef<Input>(null);\n    const [form] = Form.useForm();\n    const [, forceUpdate] = useState()\n    const [loading, setLoading] = useState<boolean>(true)\n    const [series, setSeries] = useState<ISeries>()\n    const [records, setRecords] = useState<IRecord[]>([])\n    const [unitName, setUnitName] = useState<string>()\n    let { id } = useParams()\n    const history = useHistory()\n\n    const loadAndSetSeries = async (newSeries: ISeries) => {\n        setSeries(newSeries)\n        const seriesClass = new Series(newSeries.id, newSeries.unitId)\n        const fetchedRecords = await seriesClass.loadSeriesData()\n        if (seriesClass.unit) {\n            setUnitName(seriesClass.unit.name)\n        }\n        setLoading(false)\n\n        // this is a hack to draw points on the chart one by one.\n        // for whatever reason, if you pass the chart a \"n > 1\" array,\n        // subsequent array updates will blow away \n        fetchedRecords.reduce<IRecord[]>((accum, record) => {\n            accum = [...accum, record]\n            setRecords(accum)\n            return accum\n        }, [])\n    }\n    const focusInput = () => {\n        if (inputEl && inputEl.current) {\n            inputEl.current.focus()\n        }\n    }\n    const resetState = () => {\n        setRecords([])\n        setSeries(undefined)\n        setUnitName(undefined)\n        setLoading(true)\n        forceUpdate({})\n    }\n    useEffect(() => {\n        // TODO - should proabbly move this to it's own component?\n        // this is the logic for evaluating the route param, since this the app index.\n        // lookup the string that was passed in, if it's not found in the db:\n        //   1) see if there are other series to load (existing user)\n        //   2) redirect to the landing page (new user/deleted only series)\n\n        const findSeries = async () => {\n            // no seriesId was passed in, see if there is a series to load\n            const allSeries = await db.series.toArray()\n            if (!allSeries || !allSeries[0]) {\n                // nothing to load, send user to landing page\n                history.push('/landing')\n            } else if (allSeries[0] && allSeries[0].id) {\n                // load one of the user's other series\n                const seriesId = allSeries[0].id\n                history.push(`/${seriesId}`)\n            }\n        }\n        const loadSeries = async (seriesId?: number | string) => {\n            if (seriesId !== undefined && seriesId !== '') {\n                const series = await db.series.get(Number(seriesId))\n                if (series) {\n                    resetState()\n                    return await loadAndSetSeries(series)\n                }\n            }\n            return await findSeries()\n        }\n        loadSeries(id)\n    }, [id, history])\n\n    const refreshData = () => {\n        // TODO cleanup this dupe logic, share with useEffect\n        const findSeries = async () => {\n            // no seriesId was passed in, see if there is a series to load\n            const allSeries = await db.series.toArray()\n            if (!allSeries || !allSeries[0]) {\n                // nothing to load, send user to landing page\n                history.push('/landing')\n            } else if (allSeries[0] && allSeries[0].id) {\n                // load one of the user's other series\n                const seriesId = allSeries[0].id\n                history.push(`/${seriesId}`)\n            }\n        }\n        const loadSeries = async (seriesId?: number | string) => {\n            if (seriesId !== undefined && seriesId !== '') {\n                const series = await db.series.get(Number(seriesId))\n                if (series) {\n                    resetState()\n                    return await loadAndSetSeries(series)\n                }\n            }\n            return await findSeries()\n        }\n        loadSeries(id)\n    }\n\n    const onFinish = async (values: { amount?: string }) => {\n        if (!values.amount) {\n            return // shouldn't happen. for TS\n        }\n\n        const newRecord = {\n            seriesId: Number(id),\n            timestamp: new Date().toISOString(),\n            amount: values.amount\n        }\n        const recordId = await db.records.add(newRecord)\n        const updatedRecords = [...records, { id: recordId, ...newRecord }]\n        setRecords(updatedRecords)\n\n        form.resetFields() // clear form\n    };\n\n    const updateSeriesWithUnit = async ({ name, id: unitId }: { name: string, id: number }) => {\n        // callback for unit creation.\n        // update series with unitId\n        await db.series.update(Number(id), { unitId })\n        setUnitName(name)\n        focusInput()\n    }\n\n    return (\n        <div style={{ paddingTop: '1em' }} >\n            <Spin spinning={loading} style={{ minHeight: 240 }}>\n                <Form\n                    form={form}\n                    name=\"new_record\"\n                    layout=\"inline\"\n                    onFinish={onFinish}\n                    style={{ display: 'flex', justifyContent: 'space-evenly' }}\n                >\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        {series ? (\n                            <SeriesSelect width={140} activeSeries={series.id} form={form} />\n                        ) : <div style={{ width: 140 }}></div>}\n                        {unitName ? (\n                            <Form.Item\n                                name=\"amount\"\n                                rules={[{ required: true, message: 'needs value' }]}\n                                style={{ maxWidth: 110, margin: '0 4px' }}\n                            >\n                                <Input\n                                    type=\"number\"\n                                    size=\"small\"\n                                    ref={inputEl} // for auto-focus when the page loads\n                                    suffix={unitName}\n                                />\n                            </Form.Item>\n                        ) : (\n                                <UnitSelect width={110} selectionComplete={updateSeriesWithUnit} />\n                            )}\n                        <Form.Item\n                            shouldUpdate={true}\n                            style={{ margin: '0 4px' }}\n                        >\n                            {() => (\n                                <Button\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    size=\"small\"\n                                    shape=\"round\"\n                                    disabled={\n                                        !Boolean(form.getFieldValue('amount')) ||\n                                        Boolean(form.getFieldsError().filter(({ errors }) => errors.length).length)\n                                    }\n                                >\n                                    Log\n                                </Button>\n                            )}\n                        </Form.Item>\n\n                    </div>\n                    {series ? (\n                        <>\n                            <Form.Item style={{ margin: '0' }}>\n                                 <ManageSeries series={series} records={records} onClose={refreshData} />\n                            </Form.Item>\n                            <Form.Item style={{ margin: '0' }}>\n                                <ExportData series={series} records={records} />\n                            </Form.Item>\n                        </>\n                    ) : null}\n                </Form>\n                <div>\n                    {/* if records in state, show. else show placeholder. */}\n                    {records && records.length >= 1 ?\n                        <div id=\"overlay-container\">\n                            <RecordsDynamicLineChart\n                                records={records}\n                                height={190}\n                                width={window.innerWidth*0.95}\n                                lineColor=\"rgba(6, 85, 231, .8)\" // blue\n                            />\n                            {records.length === 1 ? (\n                                // if there is only one data point,\n                                // show an overlay to encourage the user\n                                <div id=\"overlay\">\n                                    <Typography>\n                                        <Title\n                                            level={4}\n                                            style={{\n                                                color: 'rgba(240, 240, 240, .8)',\n                                                position: 'relative',\n                                                top: 24,\n                                                left: 56\n                                            }}\n                                        >\n                                            <span\n                                                role=\"img\"\n                                                aria-label=\"finger pointing\"\n                                            >\n                                                👈\n                                            </span> nice.\n                                        </Title>\n                                        <Title\n                                            level={4}\n                                            style={{\n                                                color: 'rgba(240, 240, 240, .8)',\n                                                position: 'relative',\n                                                top: 16,\n                                                left: 80\n                                            }}\n                                        >\n                                            add another to see a trend\n                                        </Title>\n                                    </Typography>\n                                </div>\n                            ) : null}\n                        </div> :\n                        // maybe just show a chart with a static, 4-6 point chart (logo shape)?\n                        !loading ? <ChartDemo\n                            width={window.innerWidth*0.95}\n                            height={190}\n                            animated={false}\n                            lineColor=\"rgba(240, 240, 240, .1)\"\n                            overlay={`start your chart ☝!`}\n                            overlayColor={'rgba(240, 240, 240, .8)'}\n                        /> : null\n                    }\n                </div>\n            </Spin>\n        </div>\n    )\n}\nexport default SeriesDetails\n","import React from 'react';\nimport './App.less';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport Landing from './containers/Landing'\nimport SeriesDetails from './containers/SeriesDetails'\n\nfunction App() {\n  return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/landing\" >\n            <Landing />\n          </Route>\n          <Route path=\"/:id?\">\n            <SeriesDetails />\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}