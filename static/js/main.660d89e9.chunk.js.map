{"version":3,"sources":["logo.svg","containers/Landing.tsx","containers/New.tsx","containers/CategoryDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Landing","layout","labelCol","span","wrapperCol","tailLayout","offset","ModalForm","visible","onCancel","useForm","form","prevVisibleRef","useRef","useEffect","current","prevVisible","console","log","resetFields","title","onOk","submit","name","Item","label","rules","required","New","useState","setVisible","Provider","onFormFinish","values","forms","basicForm","users","getFieldValue","setFieldsValue","onFinish","shouldUpdate","prevValues","curValues","length","map","user","index","key","className","icon","UserOutlined","age","Text","type","SmileOutlined","htmlType","style","marginLeft","onClick","CategoryDetails","props","match","params","id","App","src","logo","alt","to","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.660d89e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst Landing   = () => {\n\n    return (\n        <h1>Landing</h1>\n    )\n}\nexport default Landing","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, Input, InputNumber, Modal, Button, Avatar, Typography } from 'antd';\nimport { SmileOutlined, UserOutlined } from '@ant-design/icons';\nimport './New.less'\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\ninterface ModalFormProps {\n  visible: boolean;\n  onCancel: () => void;\n}\n\nconst ModalForm: React.FC<ModalFormProps> = ({ visible, onCancel }) => {\n  const [form] = Form.useForm();\n\n  const prevVisibleRef = useRef<boolean>();\n  useEffect(() => {\n    prevVisibleRef.current = visible;\n  }, [visible]);\n  const prevVisible = prevVisibleRef.current;\n\n  useEffect(() => {\n    console.log(`visible: ${visible}, prevVisible: ${prevVisible}`);\n    if (!visible && prevVisible) {\n      form.resetFields();\n    }\n  }, [visible]);\n\n  const onOk = () => {\n    form.submit();\n  };\n\n  return (\n    <Modal title=\"Basic Drawer\" visible={visible} onOk={onOk} onCancel={onCancel}>\n      <Form form={form} layout=\"vertical\" name=\"userForm\">\n        <Form.Item name=\"name\" label=\"User Name\" rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name=\"age\" label=\"User Age\" rules={[{ required: true }]}>\n          <InputNumber />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst New = () => {\n  const [visible, setVisible] = useState(false);\n\n  const showUserModal = () => {\n    setVisible(true);\n  };\n\n  const hideUserModal = () => {\n    setVisible(false);\n  };\n\n  const onFinish = (values: any) => {\n    console.log('Finish:', values);\n  };\n\n  return (\n    <div>\n      <Form.Provider\n        onFormFinish={(name, { values, forms }) => {\n          if (name === 'userForm') {\n            const { basicForm } = forms;\n            const users = basicForm.getFieldValue('users') || [];\n            basicForm.setFieldsValue({ users: [...users, values] });\n            setVisible(false);\n          }\n        }}\n      >\n        <Form {...layout} name=\"basicForm\" onFinish={onFinish}>\n          <Form.Item name=\"group\" label=\"Group Name\" rules={[{ required: true }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"User List\"\n            shouldUpdate={(prevValues, curValues) => prevValues.users !== curValues.users}\n          >\n            {({ getFieldValue }) => {\n              const users = getFieldValue('users') || [];\n              return users.length ? (\n                <ul>\n                  {users.map((user: any, index: number) => (\n                    <li key={index} className=\"user\">\n                      <Avatar icon={<UserOutlined />} />\n                      {user.name} - {user.age}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <Typography.Text className=\"ant-form-text\" type=\"secondary\">\n                  ( <SmileOutlined /> No user yet. )\n                </Typography.Text>\n              );\n            }}\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button htmlType=\"submit\" type=\"primary\">\n              Submit\n            </Button>\n            <Button htmlType=\"button\" style={{ marginLeft: 8 }} onClick={showUserModal}>\n              Add User\n            </Button>\n          </Form.Item>\n        </Form>\n\n        <ModalForm visible={visible} onCancel={hideUserModal} />\n      </Form.Provider>\n    </div>\n  );\n};\n\nexport default New\n","import React from 'react'\nimport { RouteComponentProps } from \"react-router-dom\"\n\n\nconst CategoryDetails = (props: RouteComponentProps<{id:string}>) => {\n    console.log(props.match.params.id)\n    return (\n        <h1>Category details container</h1>\n    )\n}\nexport default CategoryDetails\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.less';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n} from \"react-router-dom\";\n\nimport { Button } from 'antd';\n\nimport Landing from './containers/Landing'\nimport New from './containers/New'\nimport CategoryDetails from './containers/CategoryDetails'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Button type=\"primary\">Ant design Button!</Button>\n        <Router>\n          <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Landing</Link>\n            </li>\n            <li>\n              <Link to=\"/new\">new</Link>\n            </li>\n            <li>\n              <Link to=\"/category/7\">Category</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/category/:id\" component={CategoryDetails} />\n          <Route path=\"/new\">\n             <New />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </div>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}