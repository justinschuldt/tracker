{"version":3,"sources":["data/models/Unit.ts","data/models/Series.ts","data/local-db.ts","components/chart/RecordsDynamicLineChart.tsx","components/chart/ChartDemo.tsx","components/Utils.ts","components/form/SeriesInput.tsx","containers/Landing.tsx","components/form/SeriesSelect.tsx","components/form/UnitSelect.tsx","components/modal/ExportData.tsx","components/table/EditableRow.tsx","components/table/EditableCell.tsx","components/table/SeriesTable.tsx","components/modal/ManageSeries.tsx","containers/SeriesDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Unit","name","timestamp","id","this","Date","toISOString","findOrCreateUnit","db","unitName","a","units","get","unit","iso","add","newUnitId","Series","unitId","records","Object","defineProperties","value","enumerable","writable","Promise","all","where","equals","first","toArray","transaction","series","String","put","version","stores","table","mapToClass","Dexie","RecordsDynamicLineChart","props","useState","setRecords","chart","setChart","F2","Animate","registerAnimation","updateShape","animateCfg","cacheAttrs","attrs","oldPoints","points","newPoints","attr","oldLength","length","deltaLength","lastPoint","i","push","animate","to","duration","easing","useEffect","newChart","Chart","pixelRatio","window","devicePixelRatio","color","lineColor","data2","map","r","amount","Number","source","type","mask","tickCount","range","min","alias","axis","label","text","index","total","textCfg","textAlign","tooltip","showCrosshairs","line","position","shape","update","animation","point","style","stroke","fill","lineWidth","render","record","newRecord","addToChart","height","width","changeData","Title","wait","ms","res","setTimeout","sampleData","ChartDemo","useForm","form","forceUpdate","loading","setLoading","recordIdCounter","setRecordIdCounter","showTryMePopover","setShowTryMePopover","addRecord","recordAmount","recordId","seriesId","firstRecord","demoValues","intervalMilliseconds","intervals","amountIndex","setFieldsValue","undefined","showPopoverDwell","setInterval","clearInterval","showForm","layout","onFinish","values","resetFields","Item","margin","size","maxWidth","minWidth","bordered","defaultValue","options","optionFilterProp","content","visible","rules","required","message","placeholder","shouldUpdate","htmlType","disabled","Boolean","getFieldValue","overlay","className","level","transformToOption","downloadJsonFile","title","data","fileName","dataBlob","Blob","JSON","stringify","document","createElement","href","URL","createObjectURL","download","click","SeriesInput","seriesPlaceholder","setSeriesPlaceholder","unitPlaceholder","setUnitPlaceholder","callback","delay","savedCallback","useRef","current","useInterval","arr","potentialNext","findIndex","s","next","cyclePlaceholder","Landing","history","useHistory","setSeries","loadSeries","allSeries","seriesName","newSeries","marginTop","listStyle","role","aria-label","minHeight","isFieldsTouched","getFieldsError","filter","errors","display","justifyContent","Search","SeriesSelect","setOptions","activeSeries","setActiveSeries","newSeriesName","setNewSeriesName","fetchData","activeSeriesId","find","onNameChange","event","target","createSeries","newOptions","onChange","dropdownRender","menu","flexWrap","padding","onPressEnter","onSearch","enterButton","PlusOutlined","UnitSelect","newUnitName","setNewUnitName","setUnits","loadUnits","unitsArray","createUnit","newUnit","newUnits","selectionComplete","Text","ExportData","modalVisible","setModalVisible","exportAllData","format","e","exportSeries","exportData","buttonProps","DownloadOutlined","fontSize","onClick","onCancel","footer","icon","FileOutlined","FileExcelOutlined","EditableContext","React","createContext","EditableRow","component","Provider","EditableCell","editable","children","dataIndex","handleSave","restProps","editing","setEditing","inputRef","useContext","focus","toggleEdit","save","validateFields","console","log","childNode","ref","onBlur","formatTimestamp","isoString","toLocaleDateString","weekday","month","day","hour","minute","second","SeriesTable","columns","handleDelete","delete","state","setState","item","row","newData","splice","align","onConfirm","CloseCircleOutlined","count","newRecords","components","body","cell","col","onCell","rowClassName","dataSource","rowKey","Component","ManageSeries","onClose","danger","SettingOutlined","top","MinusCircleOutlined","deleteSeries","SeriesDetails","inputEl","setUnitName","useParams","loadAndSetSeries","seriesClass","loadSeriesData","fetchedRecords","reduce","accum","focusInput","replace","updatedRecords","updateSeriesWithUnit","spinning","suffix","newId","innerWidth","left","App","path","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c7ecc579.chunk.js","sourcesContent":["import { TrackerDatabase } from '../local-db'\n\nexport interface IUnit {\n    id?: number\n    timestamp: string\n    name: string\n}\n\nexport class Unit {\n    id?: number\n    timestamp: string\n    name: string\n    constructor(name: string, timestamp?: string, id?: number) {\n\n        this.name = name // will always have this prop, instantiating an existing or new row.\n\n        if (id) this.id = id; // if existing data\n        if (timestamp) {\n            this.timestamp = timestamp // if existing data\n        } else {\n            this.timestamp = new Date().toISOString() // if new data\n        }\n    }\n    // is it necessary to override save, since we dont dont need any\n    // async stuff, can do it all in the constructor\n    // save() {\n    //     return db.transaction('rw', db.units, db.series, db.records, async () => {\n    //         console.log('Unit.save() in db.transaction')\n    //         // Add or update ourselves\n    //         if (!this.timestamp) {\n    //             this.timestamp = new Date().toISOString() // if new data\n    //         }\n\n    //         this.id = await db.units.put(this);\n    //     });\n    // }\n}\n\nexport const findOrCreateUnit = async (db: TrackerDatabase, unitName: string): Promise<number> => {\n    // This is a work around\n    let unit = await db.units.get({name: unitName})\n    if (unit && unit.id) {\n        return unit.id\n    }\n    const iso = new Date().toISOString()\n    let newUnitId = await db.units.add({name: unitName, timestamp: iso})\n    return newUnitId\n\n  }\n  ","import { db } from '../local-db'\nimport { IUnit, Unit } from './Unit'\nimport { IRecord } from './Record'\n\nexport interface ISeries {\n    id?: number\n    name: string\n    timestamp: string\n    unitId?: IUnit['id']\n}\n\n/* This class that is mapped to the series table.\n * We can have custom helper methods on it that\n * we could call on retrieved database objects.\n * This class is instantiated when users create new objects,\n * and for each row of existing data returned by Dexie.  \n */\nexport class Series {\n    id?: number\n    timestamp: string\n    name: string\n    unitId?: number\n    unitName?: string\n    unit?: IUnit;   \n    records?: IRecord[]\n    \n    constructor(name: string, unitName?: string, unitId?: number, id?: number, timestamp?: string) {\n        // The constructor gets called for new & existing records, so input props need to be generic.\n        // This feels weird, to have to handle both use cases with a bunch of `if` statements.\n        // Will leave for now and see if the benifit of the class is worth the bad smell.\n\n        this.name = name // will always have this prop, instantiating an existing or new row.\n\n        if (id) this.id = id; // if existing data\n        if (unitId) this.unitId = unitId // if existing data\n        if (timestamp) {\n            this.timestamp = timestamp // if existing data\n        } else {\n            this.timestamp = new Date().toISOString() // if new data\n        }\n        if (unitName) this.unitName = unitName // if new data \n\n\n        // Making them non-enumerable will prevent them from being handled by\n        // indexedDB when doing put() or add().\n        // if excuded, will the array save automatically?\n        // is this only needed for the this.save() override to work?\n        Object.defineProperties(this, {\n            records: {value: [], enumerable: false, writable: true },\n        });\n    }\n    \n    // helper method to fetch all the related data\n    async loadSeriesData(): Promise<IRecord[]> {\n        if (!this.id || !this.unitId) {\n            return []\n        }\n        [this.unit, this.records] = await Promise.all([\n            db.units.where('id').equals(this.unitId).first(),\n            db.records.where('seriesId').equals(this.id).toArray() // TODO - order by date\n        ]);\n        return this.records || []\n\n    }\n\n\n    // override the DB api's save method to handle the find-or-create of the unit.\n    save() {\n        return db.transaction('rw', db.units, db.series, db.records, async () => {\n            // this is not great. maybe move this logic to the Unit class?\n            // make findOrCreate on Unit class?\n            // super hacky - FIXME\n            let { unitName } = this\n            unitName = String(unitName)\n            let unitId = this.unitId\n\n            if (!unitId) { // new record, need to find or create Unit\n                let unit = await db.units.where('name').equals(unitName).first()\n                if (unit) {\n                    unitId = unit.id\n                } else {\n                    let newUnitId = await db.units.add(new Unit(unitName))\n                    unitId = newUnitId\n                }\n                this.unitId = unitId\n            }\n            // Add or update ourselves\n            this.id = await db.series.put({...this, unitId: 1});\n        });\n    }\n}","import Dexie from 'dexie'\nimport { IUnit, Unit } from './models/Unit'\nimport { Series, ISeries } from './models/Series'  \nimport { IRecord } from './models/Record'\n\nexport class TrackerDatabase extends Dexie {\n  series: Dexie.Table<ISeries, number>;\n  units: Dexie.Table<IUnit, number>;\n  records: Dexie.Table<IRecord, number>;\n  \n  constructor() {  \n    super(\"TrackerDatabase\");\n    \n    //\n    // Define tables and indexes\n    // (Here's where the implicit table props are dynamically created)\n    //\n    this.version(1).stores({\n      series: '++id, timestamp, name, unitId',\n      units: '++id, timestamp, name',\n      records: '++id, timestamp, seriesId, amount',\n    });\n    \n    // The following lines are needed for it to work across typescipt using babel-preset-typescript:\n    this.series = this.table<ISeries, number>(\"series\");\n    this.units = this.table(\"units\")\n    // are these even needed?;\n    this.records = this.table(\"records\");\n\n     this.series.mapToClass(Series);\n     this.units.mapToClass(Unit)\n  }\n}\n\nexport const db = new TrackerDatabase();\n","import React, { useEffect, useState } from 'react'\nimport F2 from '@antv/f2';\nimport { IRecord } from '../../data/models/Record';\n\ninterface RecordsDynamicLineChartProps {\n  records: IRecord[]\n  height?: number | string\n  width?: number | string\n  lineColor?: string\n}\n\nexport const RecordsDynamicLineChart = (props: RecordsDynamicLineChartProps) => {\n  let [records, setRecords] = useState<IRecord[]>([])\n  let [chart, setChart] = useState<any>()\n\n  F2.Animate.registerAnimation('lineUpdate', function (updateShape: any, animateCfg: any) {\n    const cacheShape = updateShape.get('cacheShape'); // 该动画 shape 的前一个状态\n    const cacheAttrs = cacheShape.attrs; // 上一个 shape 属性\n    const oldPoints = cacheAttrs.points; // 上一个状态的关键点\n    const newPoints = updateShape.attr('points'); // 当前 shape 的关键点\n\n    const oldLength = oldPoints.length;\n    const newLength = newPoints.length;\n    const deltaLength = newLength - oldLength;\n\n    const lastPoint = newPoints[newPoints.length - 1];\n    for (let i = 0; i < deltaLength; i++) {\n      oldPoints.push(lastPoint);\n    }\n\n    updateShape.attr(cacheAttrs);\n    updateShape.animate().to({\n      attrs: {\n        points: newPoints\n      },\n      duration: 2000,\n      easing: animateCfg.easing\n    });\n  });\n\n\n  useEffect(() => {\n    if (!chart) {\n      const newChart = new F2.Chart({\n        id: 'mountNode',\n        pixelRatio: window.devicePixelRatio\n      });\n  \n      const defs = {\n        timestamp: {\n          type: 'timeCat',\n          mask: 'MM/DD',\n          tickCount: 3,\n          range: [0, 1]\n        },\n        amount: {\n          tickCount: 5,\n          min: 0,\n          alias: 'amount' // TODO - use unit name here\n        }\n      };\n      const color = props.lineColor ? props.lineColor : '#fff'\n      const data2 = props.records.map(r => ({ ...r, amount: Number(r.amount) }))\n      setRecords(data2)\n      newChart.source(data2, defs);\n  \n      newChart.axis('time', {\n        label: function label(text: any, index: any, total: any) {\n          const textCfg: { textAlign?: string } = {};\n          if (index === 0) {\n            textCfg.textAlign = 'left';\n          } else if (index === total - 1) {\n            textCfg.textAlign = 'right';\n          }\n          return textCfg;\n        }\n      });\n      newChart.tooltip({\n        showCrosshairs: true\n      });\n      newChart.line().position('timestamp*amount').shape('smooth').animate({\n        update: {\n          animation: 'lineUpdate'\n        }\n      }).color(color)\n  \n      newChart.point().position('timestamp*amount').shape('smooth')\n        .style({\n          stroke: color,\n          fill: color,\n          lineWidth: 1,\n  \n        });\n      newChart.render();\n  \n      setChart(newChart)\n\n    }\n  }, [props.lineColor, props.records, chart]);\n\n  function addToChart(record: IRecord) {\n    const newRecord = { ...record, amount: Number(record.amount) }\n    setRecords(r => [...r, newRecord])\n  }\n  useEffect(() => {\n    const lastRecord = props.records[props.records.length - 1]\n    addToChart(lastRecord)\n  }, [props.records])\n\n\n\n  return (\n    <div id=\"container\">\n      <canvas\n        id=\"mountNode\"\n        height={props.height}\n        width={props.width}\n      />\n      {chart && records ? (chart.changeData(records)) : null}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Input, Form, Button, Select, Popover, Typography } from 'antd'\nimport { IRecord } from '../../data/models/Record'\nimport { RecordsDynamicLineChart } from './RecordsDynamicLineChart'\nimport './ChartDemo.less'\nconst { Title } = Typography;\n\n// helper function, async pause\nconst wait = (ms: number) => new Promise(res => setTimeout(res, ms))\n\n// data for chart-updating demo\nconst sampleData = [1, 2, 1, 3, 2, 4, 2, 3, 4, 6, 7, 9, 13]\n\ninterface ChartDempProps {\n    height?: number | string\n    width?: number | string\n    showForm?: boolean\n    lineColor?: string\n    overlay?: string\n}\nexport const ChartDemo = (props: ChartDempProps) => {\n    const [form] = Form.useForm();\n    const [, forceUpdate] = useState()\n    const [loading, setLoading] = useState<boolean>(false)\n    const [records, setRecords] = useState<IRecord[]>([])\n    const [recordIdCounter, setRecordIdCounter] = useState<number>(0)\n    const [showTryMePopover, setShowTryMePopover] = useState<boolean>(false)\n\n\n\n    const addRecord = (recordAmount: number, recordId: number) => {\n        // creates a  record object and adds it to state.\n        // created to be used in a map function, recordId is the index\n        const newRecord = {\n            id: recordId,\n            seriesId: 1,\n            timestamp: new Date().toISOString(),\n            amount: recordAmount\n        }\n        setRecords(r =>[...r, newRecord])\n        const newRecordId = recordId + 1\n        setRecordIdCounter(newRecordId)\n    }\n    useEffect(() => {\n        // TODO - find how to move this function elsewhere.\n        // currently here to fix eslint: react-hooks/exhaustive-deps\n        const mockedInteractionDemo = (intervalMilliseconds: number) =>\n            (recordAmount: number, amountIndex: number) =>\n                setTimeout(async () => {\n                    // this function modifies state to mock user interaction.\n                    const recordId = amountIndex + 1\n                    // type the number into the form\n                    form.setFieldsValue({ amount: recordAmount })\n                    await wait(800)\n\n                    // press submit, loading symbol shows\n                    setLoading(true)\n                    addRecord(recordAmount, recordId)\n                    await wait(600)\n\n                    // clear loading, clear form value\n                    form.setFieldsValue({ amount: undefined })\n                    setLoading(false)\n                }, (intervalMilliseconds * (amountIndex + 1)))\n        forceUpdate({}) // to disable form button\n        const demoCycleMilliseconds = 4000\n        const [firstRecord, ...demoValues] = sampleData\n        addRecord(firstRecord, 0) // \n        const intervals = demoValues.map(mockedInteractionDemo(demoCycleMilliseconds))\n\n        // show \"Try me!\" popover after all the mockedInteractionDemos\n        const showPopoverDwell = (sampleData.length + 1) * demoCycleMilliseconds\n        intervals.push(setInterval(() => setShowTryMePopover(true), showPopoverDwell))\n\n        return function cleanup() {\n            intervals.map(clearInterval) // use useInterval?\n        }\n    }, [form])\n\n\n    const onFinish = (values: { amount?: string }) => {\n        // form submission - create a new record, add it to state for chart\n        if (!values.amount) {\n            return // shouldn't happen. for TS\n        }\n        addRecord(Number(values.amount), recordIdCounter)\n        form.resetFields()\n        // hide call to action popover, since they did it.\n        setShowTryMePopover(false)\n    };\n    return (\n        <>\n            {props.showForm ? (\n                <Form form={form} name=\"demo_flow\" layout=\"inline\" onFinish={onFinish} >\n                    <Form.Item\n                        name=\"seriesName\"\n                        style={{ margin: '0 8px' }}\n                    >\n                        <Select\n                            size=\"small\"\n                            style={{ maxWidth: 160, minWidth: 120 }}\n                            bordered={false}\n                            defaultValue=\"running\"\n                            options={[{ label: 'running', value: '1' }]}\n                            optionFilterProp=\"children\"\n\n                        />\n                    </Form.Item>\n                    <Popover\n                        content=\"Try me!\"\n                        visible={showTryMePopover}\n                    >\n                        <Form.Item\n                            name=\"amount\"\n                            rules={[{ required: true, message: 'required' }]}\n                            style={{ maxWidth: 70, margin: '0 8px' }}\n                        >\n                            <Input\n                                size=\"small\"\n                                placeholder={\"miles\"}\n                            />\n                        </Form.Item>\n                    </Popover>\n                    <Form.Item shouldUpdate={true} style={{ margin: '0 8px' }}>\n                        {() => (\n                            <Button\n                                size=\"small\"\n                                type=\"primary\"\n                                shape=\"round\"\n                                htmlType=\"submit\"\n                                loading={loading}\n                                disabled={\n                                    loading ||\n                                    !Boolean(form.getFieldValue('amount'))\n                                }\n                            >\n                                Log\n                            </Button>\n                        )}\n                    </Form.Item>\n                </Form>\n\n            ) : null}\n            {/* if records in state, show. else show placeholder. */}\n            {records && records.length >= 1 ?\n                <div id=\"overlay-container\">\n                    <RecordsDynamicLineChart\n                        records={records}\n                        height={props.height}\n                        width={props.width}\n                        lineColor={props.lineColor}\n                    />\n                    {props.overlay ? (\n                        <div id=\"overlay\" className=\"overlay-flex-container\" >\n                            <Typography >\n                                <Title level={4} style={{ color: props.lineColor }} >\n                                    {props.overlay}\n                                </Title>\n                            </Typography>\n                        </div>\n                    ) : null}\n                </div>\n                : null\n            }\n        </>\n    )\n}","import { useEffect, useRef } from 'react'\nimport { ISeries } from '../data/models/Series'\nimport { IUnit } from '../data/models/Unit'\n\nexport interface IOption {\n    label: string | JSX.Element\n    value: string | number\n  }\n  \n  export function transformToOption({name, id}: ISeries | IUnit): IOption  {\n    return {\n      label: name, \n      value: Number(id)\n    }\n  }\n\n  export function useInterval(callback: () => void, delay: number) {\n    const savedCallback = useRef<() => void>();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        if (savedCallback && savedCallback.current) {\n            savedCallback.current()\n        }\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  export const downloadJsonFile = (title: string, data: any) => {\n    const timestamp = new Date().toISOString()\n    const fileName = `${title}_${timestamp}.json`;\n    const dataBlob = new Blob(\n      [JSON.stringify(data,undefined,2)],\n      { type:`application/json` }\n      ) \n      const a = document.createElement('a');\n      a.href = URL.createObjectURL(dataBlob);\n      a.download = fileName\n      a.click();\n  }","import React, { Fragment, useState } from 'react'\nimport { Form, Input } from 'antd'\nimport { useInterval } from '../Utils'\n\nexport const sampleData: [string, string][] = [\n    ['running', 'miles'],\n    ['coffee consumption', 'cups'],\n    ['pushups', 'reps'],\n    ['alcohol', 'drinks'],\n    ['meditation', 'minutes'],\n    ['snacks eaten', 'serving'],\n    ['anerobic exercise', 'minutes'],\n    ['TV watched', 'hours'],\n    ['walking', 'miles'],\n]\nexport const SeriesInput = () => {\n    const [seriesPlaceholder, setSeriesPlaceholder] = useState<string>(sampleData[0][0])\n    const [unitPlaceholder, setUnitPlaceholder] = useState<string>(sampleData[0][1])\n\n    const cyclePlaceholder = (arr: [string, string][]) => {\n        const currIndex = arr.findIndex(s => s[0] === seriesPlaceholder)\n        const potentialNext = currIndex + 1\n\n        if (potentialNext >= arr.length) {\n            // reached end of array, start from beginning\n            setSeriesPlaceholder(arr[0][0])\n            setUnitPlaceholder(arr[0][1])\n            return\n        }\n        const next = arr[potentialNext]\n        setSeriesPlaceholder(next[0])\n        setUnitPlaceholder(next[1])\n    }\n\n    useInterval(() => {\n        cyclePlaceholder(sampleData)\n    }, 3000)\n\n    return (\n        <Fragment>\n            <Form.Item\n                name=\"seriesName\"\n                rules={[{ required: true, message: 'Please input something' }]}\n                style={{ width: 110, margin: '0 8px' }}\n            >\n                <Input\n                    size=\"small\"\n                    placeholder={seriesPlaceholder}\n                />\n            </Form.Item>\n            <Form.Item\n                name=\"unitName\"\n                rules={[{ required: true, message: 'Please input something' }]}\n                style={{ width: 90, margin: '0 8px' }}\n            >\n                <Input\n                    size=\"small\"\n                    placeholder={unitPlaceholder}\n                />\n            </Form.Item>\n        </Fragment>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Button, Typography, Form, } from 'antd';\nimport { useHistory, Link } from 'react-router-dom'\nimport { db } from '../data/local-db'\nimport { ChartDemo } from '../components/chart/ChartDemo'\nimport { SeriesInput } from '../components/form/SeriesInput'\nimport { findOrCreateUnit } from '../data/models/Unit';\nimport './Landing.less'\nimport { ISeries } from '../data/models/Series';\nconst { Title } = Typography;\n\nconst Landing = () => {\n    const [form] = Form.useForm();\n    const history = useHistory()\n    const [, forceUpdate] = useState()\n    const [series, setSeries] = useState<ISeries[]>([])\n\n    const loadSeries = async () => {\n        const allSeries = await db.series.toArray()\n        setSeries(allSeries)\n    }\n\n    useEffect(() => {\n        forceUpdate({}) // force form validation to disable submit button\n        loadSeries() // load series for link to series-details logic\n    }, [])\n\n    const onFinish = async (values: { seriesName?: string, unitName?: string }) => {\n        if (!values.seriesName || !values.unitName) {\n            return // shouldn't happen. for TS\n        }\n        const unitId = await findOrCreateUnit(db, values.unitName)\n        const newSeries = {\n            name: values.seriesName,\n            timestamp: new Date().toISOString(),\n            unitId\n        }\n        const seriesId = await db.series.add(newSeries)\n        history.push(`/series-details/${seriesId}`)\n    }\n\n\n    return (\n        <>\n            <div style={{ marginTop: '8px' }}>\n                <div className=\"indent\" >\n                    <Typography>\n                        <Title level={2}>simple habit tracking</Title>\n                        <ul style={{ listStyle: 'none' }}>\n                            <li><span role=\"img\" aria-label=\"woman scientist\">👩‍🔬</span> decide what you want to track</li>\n                            <li><span role=\"img\" aria-label=\"clipboard\">📋</span> use this app to log data</li>\n                            <li><span role=\"img\" aria-label=\"chart upwards\">📈</span> see charts about your behavior</li>\n                        </ul>\n                    </Typography>\n                </div>\n            </div>\n            <div style={{ marginTop: '8px' }}>\n                <div className=\"indent\">\n                    <Typography>\n                        <Title level={2}>demo</Title>\n                    </Typography>\n                    <div className=\"indent\">\n                        <div style={{ minHeight: 200 }}>\n                            <ChartDemo height={170} showForm lineColor={\"rgba(6, 85, 231, .6)\"} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div style={{ marginTop: '8px' }}>\n                <div className=\"indent\">\n                    <Typography>\n                        <Title level={2}>get started</Title>\n                    </Typography>\n                    <div className=\"indent\">\n                        <Typography>\n                            <Title level={4}>what do you want to track?</Title>\n                        </Typography>\n                        <div className=\"indent\">\n                            <Form form={form} name=\"landing_series_creation\" layout=\"inline\" onFinish={onFinish} >\n                                <SeriesInput />\n                                <Form.Item shouldUpdate={true} style={{ margin: '0 8px' }}>\n                                    {() => (\n                                        <Button\n                                            type=\"primary\"\n                                            htmlType=\"submit\"\n                                            size=\"small\"\n                                            shape=\"round\"\n                                            disabled={\n                                                !form.isFieldsTouched(true) ||\n                                                Boolean(form.getFieldsError().filter(({ errors }) => errors.length).length)\n                                            }\n                                        >\n                                            Start\n                                        </Button>\n                                    )}\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {series && series[0] && series[0].id ? (\n                <div style={{ marginTop: 24, display: 'flex', justifyContent: 'center' }}>\n                    {/* show a link to series-details, incase an existing user ends up here */}\n                    <Link to={`/series-details/${series[0].id}`} >Go to records</Link>\n                </div>\n            ) : null}\n        </>\n    )\n}\nexport default Landing","import React, { useState, useEffect } from 'react'\nimport { Form, Select, Input, Divider } from 'antd'\nimport { PlusOutlined } from '@ant-design/icons'\nimport { db } from '../../data/local-db'\nimport { ISeries } from '../../data/models/Series'\nimport { useHistory } from 'react-router-dom'\nimport { IOption, transformToOption } from '../Utils'\nimport { FormInstance } from 'antd/lib/form'\nconst { Search } = Input\n\ninterface SeriesSelectProps {\n  activeSeries: string\n  form: FormInstance\n  width: number | string\n}\nconst SeriesSelect = (props: SeriesSelectProps) => {\n  const [series, setSeries] = useState<ISeries[]>([])\n  const [options, setOptions] = useState<IOption[]>([])\n  const [activeSeries, setActiveSeries] = useState<ISeries>()\n  const [newSeriesName, setNewSeriesName] = useState()\n\n  let history = useHistory()\n\n  useEffect(() => {\n    fetchData(props.activeSeries)\n  }, [props.activeSeries])\n\n  const fetchData = async (activeSeriesId: string) => {\n    const series = await db.series.toArray()\n    setSeries(series)\n\n    const options = series.map(transformToOption)\n\n    const activeSeries = series.find(s => s.id === Number(activeSeriesId))\n\n    if (activeSeries) {\n      setActiveSeries(activeSeries)\n    }\n    setOptions(options)\n  }\n\n  function onChange(value: string) {\n    history.push(`/series-details/${value}`)\n  }\n  const onNameChange = (event: any) => {\n    setNewSeriesName(event.target.value)\n  };\n\n  const createSeries = async () => {\n    if (newSeriesName) {\n      // add to db\n      const timestamp = new Date().toISOString()\n      const name = String(newSeriesName)\n      const id = await db.series.add({ name, timestamp })\n      const newSeries = [...series, { id, name, timestamp }]\n      setSeries(newSeries)\n      const newOptions = newSeries.map(transformToOption)\n      setOptions(newOptions)\n      setActiveSeries({ id, name, timestamp })\n      setNewSeriesName(undefined) // clear the input\n      props.form.setFieldsValue({ seriesId: id })\n      history.push(`/series-details/${id}`)\n    }\n  };\n\n  return (\n    options && options.length >= 1 ? (\n      <Form.Item\n        name=\"seriesId\"\n        style={{ margin: '0 4px 0 0' }}\n      >\n        <Select\n          size=\"small\"\n          style={{ width: props.width }}\n          bordered={false}\n          onChange={onChange}\n          options={options}\n          value={String(activeSeries?.id)}\n          defaultValue={String(activeSeries?.name)}\n          dropdownRender={menu => (\n            <div>\n              {menu}\n              <Divider style={{ margin: '4px 0' }} />\n              <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n                <Search\n                  size=\"small\"\n                  value={newSeriesName}   // keep value in state for submit/clear\n                  onChange={onNameChange} // updates state with form value\n                  placeholder=\"meditation\"\n                  onPressEnter={createSeries} // enter key pressed\n                  onSearch={createSeries}     // \"+\" button clicked\n                  enterButton={<PlusOutlined />}\n                />\n              </div>\n            </div>\n          )}\n        />\n      </Form.Item>\n\n    ) : <div style={{ width: props.width }}></div>\n  )\n}\n\nexport default SeriesSelect\n","import React, { useState, useEffect } from 'react'\nimport { Select, Divider, Input, Form } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { IUnit } from '../../data/models/Unit';\nimport { db } from '../../data/local-db'\nimport { IOption, transformToOption } from '../Utils';\nconst { Search } = Input\n\ninterface UnitSelectProps {\n  width: number | string\n  selectionComplete: (props: { name: string, id: number }) => void\n}\nexport const UnitSelect = (props: UnitSelectProps) => {\n  const [newUnitName, setNewUnitName] = useState()\n  const [options, setOptions] = useState<IOption[]>([])\n  const [units, setUnits] = useState<IUnit[]>([])\n\n  useEffect(() => {\n    loadUnits()\n  }, [])\n\n  const loadUnits = async () => {\n    const unitsArray = await db.units.toArray()\n    const options = unitsArray.map(transformToOption)\n    setUnits(unitsArray)\n    setOptions(options)\n  }\n  const unitSelected = (unitId: number) => {\n    const unit = units.find(unit => unit.id === unitId)\n    if (unit) {\n      props.selectionComplete({ ...unit, id: unitId })\n    }\n  }\n\n  const onNameChange = (event: any) => {\n    setNewUnitName(event.target.value)\n  };\n\n  const createUnit = async () => {\n    if (newUnitName) {\n      // add to db\n      const iso = new Date().toISOString()\n      const newUnit = {\n        name: String(newUnitName),\n        timestamp: iso,\n      }\n      let newUnitId = await db.units.add(newUnit)\n      const unit = { ...newUnit, id: newUnitId }\n      const newUnits = [...units, unit]\n      const newOptions = newUnits.map(transformToOption)\n      setUnits(newUnits)\n      setOptions(newOptions)\n      setNewUnitName(undefined) // clear the input\n      props.selectionComplete(unit)\n    }\n  };\n\n  return (\n    <Form.Item\n      name=\"unit\"\n      rules={[{ required: true, message: 'Please choose a unit' }]}\n      style={{ margin: '0 4px' }}\n    >\n      <Select\n        size=\"small\"\n        style={{ width: props.width }}\n        placeholder=\"unit\"\n        onChange={unitSelected}\n        dropdownRender={menu => (\n          <div>\n            {menu}\n            <Divider style={{ margin: '4px 0' }} />\n            <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n\n              <Search\n                size=\"small\"\n                value={newUnitName}      // keep value in state for submit/clear\n                onChange={onNameChange}  // updates state with form value\n                placeholder=\"session\"\n                onPressEnter={createUnit} // enter key pressed\n                onSearch={createUnit}     // \"+\" button clicked\n                enterButton={<PlusOutlined />}\n              />\n            </div>\n          </div>\n        )}\n        options={options}\n      />\n    </Form.Item>\n  );\n\n}","import React, { useState } from 'react'\nimport { Button, Modal, Typography } from 'antd'\nimport {\n  DownloadOutlined,\n  FileExcelOutlined,\n  FileOutlined,\n} from '@ant-design/icons'\nimport { ISeries } from '../../data/models/Series'\nimport { IRecord } from '../../data/models/Record'\nimport { downloadJsonFile } from '../Utils'\nimport { db } from '../../data/local-db'\nimport { IUnit } from '../../data/models/Unit'\n\nconst { Title, Text } = Typography\n\ninterface ExportDataProps {\n  series?: ISeries\n  records?: IRecord[]\n}\nexport const ExportData = (props: ExportDataProps) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false)\n\n  const exportAllData = (format: 'json' | 'csv') => async (e: any) => {\n    const units = await db.units.toArray()\n    const series = await db.series.toArray()\n    const records = await db.records.toArray()\n    const exportData = { units, series, records }\n    downloadJsonFile('full-data-export', exportData)\n  }\n\n  const exportSeries = (format: 'json' | 'csv', series: ISeries, records: IRecord[]) =>\n    async (e: any) => {\n      let unit: IUnit | undefined = undefined\n      if (series.unitId) {\n        unit = await db.units.where('id').equals(series.unitId).first()\n      }\n      const exportData = { series, records, unit }\n      downloadJsonFile(series.name, exportData)\n    }\n  const buttonProps = {\n    style: { margin: '4px' },\n    type: \"primary\" as any,\n    size: \"small\" as any,\n    shape: \"round\" as any\n  }\n  return (\n    <div>\n      <DownloadOutlined style={{ fontSize: 22 }} onClick={() => setModalVisible(true)} />\n      <Modal\n        title={<Title level={4} style={{ margin: 0 }}>export data</Title>}\n        visible={modalVisible}\n        onCancel={() => setModalVisible(false)}\n        footer={null}\n      >\n        <div>\n          <Typography>\n            <Title level={4} style={{ margin: 0 }}>all your data</Title>\n            <Text className=\"indent\">export as:</Text>\n          </Typography>\n          <div className=\"indent\">\n            <div className=\"indent\">\n              <Button\n                type=\"primary\"\n                {...buttonProps}\n                onClick={exportAllData('json')}\n                icon={<FileOutlined />}\n              >\n                json\n                  </Button>\n              <Button\n                type=\"primary\"\n                {...buttonProps}\n                onClick={exportAllData('csv')}\n                icon={<FileExcelOutlined />}\n                disabled // TODO\n              >\n                spreadsheet\n                  </Button>\n            </div>\n          </div>\n        </div>\n        {props.series && props.records ? (\n          <div style={{ marginTop: 16 }}>\n            <Typography>\n              <Title level={4} style={{ margin: 0 }}>{props.series.name} data</Title>\n              <Text className=\"indent\">export as:</Text>\n            </Typography>\n            <div className=\"indent\">\n              <div className=\"indent\">\n                <Button\n                  type=\"primary\"\n                  {...buttonProps}\n                  onClick={exportSeries('json', props.series, props.records)}\n                  icon={<FileOutlined />}\n                >\n                  json\n                    </Button>\n                <Button\n                  type=\"primary\"\n                  {...buttonProps}\n                  onClick={exportSeries('csv', props.series, props.records)}\n                  icon={<FileExcelOutlined />}\n                  disabled // TODO\n                >\n                  spreadsheet\n                    </Button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </Modal>\n    </div>\n  )\n}","import React from 'react';\nimport { Form } from 'antd';\n// TODO - better typing\nexport const EditableContext = React.createContext<any>(undefined);\n\ninterface EditableRowProps {\n    index: number;\n}\n  \nexport const EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    )\n}","import React, {\n    useContext,\n    useState,\n    useEffect,\n    useRef\n} from 'react';\nimport { Input, Form } from 'antd';\nimport { EditableContext } from './EditableRow'\nimport { SeriesTableRecord } from './SeriesTable'\n\n\ninterface EditableCellProps {\n    title: React.ReactNode;\n    editable: boolean;\n    children: React.ReactNode;\n    dataIndex: keyof SeriesTableRecord;\n    record: SeriesTableRecord;\n    handleSave: (record: SeriesTableRecord) => void;\n}\n  \nexport const EditableCell: React.FC<EditableCellProps> = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    ...restProps\n  }) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef<Input>(null);\n    const form = useContext(EditableContext);\n  \n    useEffect(() => {\n      if (editing && inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, [editing]);\n  \n    const toggleEdit = () => {\n      setEditing(!editing);\n      form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n    };\n  \n    const save = async (e: any) => {\n      try {\n        const values = await form.validateFields();\n  \n        toggleEdit();\n        handleSave({ ...record, ...values });\n      } catch (errInfo) {\n        console.log('Save failed:', errInfo);\n      }\n    };\n  \n    let childNode = children;\n  \n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{ margin: 0, maxWidth: 50 }}\n          name={dataIndex}\n          rules={[\n            {\n              required: true,\n              message: `✏☝`,\n            },\n          ]}\n        >\n          <Input\n            ref={inputRef}\n            onPressEnter={save}\n            onBlur={save}\n          />\n        </Form.Item>\n      ) : (\n        <div\n            className=\"editable-cell-value-wrap\"\n            onClick={toggleEdit}\n        >\n            {children}\n        </div>\n      );\n    }\n  \n    return <td {...restProps}>{childNode}</td>;\n  };\n","import React, { Component } from 'react';\nimport { Table, Popconfirm, } from 'antd';\nimport { CloseCircleOutlined } from '@ant-design/icons'\nimport { ISeries } from '../../data/models/Series';\nimport { IRecord } from '../../data/models/Record';\nimport { ColumnType } from 'antd/lib/table/interface'\nimport { EditableCell } from './EditableCell'\nimport { EditableRow } from './EditableRow'\nimport { db } from '../../data/local-db'\n\nexport interface SeriesTableRecord extends IRecord {\n  id: number;\n}\n\ninterface EditableColumnType<RecordType> extends ColumnType<RecordType> {\n    editable?: boolean\n}\ninterface EditableTableProps {\n    series: ISeries\n    records: IRecord[]\n}\ninterface EditableTableState {\n    records: SeriesTableRecord[]\n    count: number\n}\nconst formatTimestamp = (isoString: string): string => {\n    const date = new Date(isoString)\n    var options = {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n    }\n    return date.toLocaleDateString(undefined, options)\n}\n\n\n// TODO - convert to function, use hooks\n// make this more tightly coupled to the data - less local state.\nexport class SeriesTable extends Component<EditableTableProps, EditableTableState> {\n  // This component holds records in state, renders a table of records\n  // update/delete actions are performed on the DB store, then state is updated.\n    columns: EditableColumnType<SeriesTableRecord>[]\n  constructor(props: EditableTableProps) {\n    super(props);\n    this.columns = [\n      {\n        title: 'timestamp',\n        dataIndex: 'timestamp',\n        render: formatTimestamp\n      },\n      {\n        title: 'amount', // TODO - change to unitName? miles, reps, etc.\n        dataIndex: 'amount',\n        editable: true,\n      },\n      {\n        title: '',\n        dataIndex: 'operation',\n        align: 'center',\n        render: (text, record) =>\n            <Popconfirm\n                title=\"Are you sure?\"\n                onConfirm={() => this.handleDelete(record.id)}>\n              <CloseCircleOutlined className=\"danger\" style={{fontSize: 18, color: '#ff4d4f'}}/>\n            </Popconfirm>\n      },\n    ];\n\n    this.state = {\n      records: [],\n      count: 0,\n    };\n  }\n  componentDidMount() {\n      const newRecords  = this.props.records.map(r => ({ ...r, id: Number(r.id)}))\n      this.setState(() => ({\n          records: newRecords as SeriesTableRecord[],\n          count: newRecords.length\n      }))\n  }\n\n  handleDelete = async (id: number) => {\n    // remove record from data store\n    await db.records.delete(id)\n    // remove record from local state\n    const data = [...this.state.records];\n    this.setState({ records: data.filter(item => item.id !== id) });\n  };\n\n  handleSave = async (row: SeriesTableRecord) => {\n    // remove record from data store\n    await db.records.update(row.id, {amount: row.amount})\n    // remove record from local state\n    const newData = [...this.state.records];\n    const index = newData.findIndex(item => row.id === item.id);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n\n    this.setState({ records: newData });\n  };\n\n  render() {\n    const { records } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: (record: SeriesTableRecord)  => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    }) as ColumnType<SeriesTableRecord>[] // TODO - better type\n    return (\n        <Table\n            size=\"small\"\n            components={components}\n            rowClassName={() => 'editable-row'}\n            bordered\n            dataSource={records}\n            rowKey=\"id\"\n            columns={columns}\n        />\n    );\n  }\n}\n","import React, { useState } from 'react'\nimport { Button, Modal, Typography, Divider, Popconfirm} from 'antd'\nimport {\n    CloseCircleOutlined,\n    MinusCircleOutlined,\n    SettingOutlined\n} from '@ant-design/icons'\nimport { ISeries } from '../../data/models/Series'\nimport { IRecord } from '../../data/models/Record'\nimport { SeriesTable } from '../table/SeriesTable'\nimport { db } from '../../data/local-db'\n\nconst { Title, Text } = Typography\n\ninterface ManageSeriesProps {\n    series: ISeries\n    records?: IRecord[]\n    onClose?: () => void\n}\nexport const ManageSeries = (props: ManageSeriesProps) => {\n    const [modalVisible, setModalVisible] = useState<boolean>(false)\n\n    const deleteSeries = (series: ISeries) => async (e: any) => {\n        if (!series.id) {\n            return\n        }\n        await db.records.where('seriesId').equals(series.id).delete()\n        await db.series.delete(series.id)\n\n        onClose()\n    }\n    const deleteRecords = (series: ISeries) => async (e: any) => {\n        if (!series.id) {\n            return\n        }\n        await db.records.where('seriesId').equals(series.id).delete()\n        onClose()\n    }\n    const onClose = () => {\n        if (props.onClose) {\n            props.onClose() // TEMP callback\n        }\n        setModalVisible(false)\n    }\n    const buttonProps = {\n        style: { margin: '4px' },\n        danger: true,\n        size: \"small\" as any,\n        shape: \"round\" as any\n    }\n    return (\n        <div>\n            <SettingOutlined\n                style={{ fontSize: 22 }}\n                onClick={() => setModalVisible(true)}\n            />\n            <Modal\n                title={\n                    <Title level={4} style={{ margin: 0 }}>\n                        manage {props.series.name} data\n                    </Title>\n                }\n                visible={modalVisible}\n                onCancel={onClose}\n                footer={null}\n                style={{ top: 20 }} // keyboard is needed, so move content up\n            >\n                <div>\n                    {props.records && props.records.length >= 1 ? (\n                        <>\n                            <div>\n                                <Typography>\n                                    <Title level={4}>edit/delete records</Title>\n                                </Typography>\n                                <SeriesTable\n                                    series={props.series}\n                                    records={props.records}\n                                />\n                            </div>\n                            <Divider style={{ marginTop: 0 }} />\n                            <div>\n                                <Typography>\n                                    <Title level={4} style={{ margin: 0 }}>\n                                        clear all records\n                                    </Title>\n                                    <Text className=\"indent\">\n                                        erase records, start fresh\n                                    </Text>\n                                </Typography>\n                                <div className=\"indent\">\n                                    <div className=\"indent\">\n                                        <Popconfirm\n                                            title=\"Are you sure?\"\n                                            onConfirm={deleteRecords(props.series)}\n                                        >\n                                            <Button\n                                                className=\"indent\"\n                                                {...buttonProps}\n                                                icon={<MinusCircleOutlined />}\n                                            >\n                                                delete records\n                                            </Button>\n                                        </Popconfirm>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <Divider style={{ margin: '16px 0' }} />\n                        </>\n                    ) : null}\n                    <div >\n                        <Typography>\n                            <Title level={4} style={{ margin: 0 }}>\n                                stop tracking {props.series.name}\n                            </Title>\n                            <Text className=\"indent\">\n                                erase {props.series.name} and any records you've created\n                            </Text>\n                        </Typography>\n                        <div className=\"indent\">\n                            <div className=\"indent\">\n                                <Popconfirm\n                                    title=\"Are you sure?\"\n                                    onConfirm={deleteSeries(props.series)}\n                                >\n                                    <Button\n                                        {...buttonProps}\n                                        icon={<CloseCircleOutlined />}\n                                    >\n                                        delete {props.series.name}\n                                    </Button>\n                                </Popconfirm>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal>\n        </div>\n    )\n}","import React, { useState, useEffect, useRef } from 'react'\nimport { useParams, useHistory } from \"react-router-dom\"\nimport { Form, Input, Button, Typography, Spin } from 'antd';\nimport { db } from '../data/local-db'\nimport { RecordsDynamicLineChart } from '../components/chart/RecordsDynamicLineChart'\nimport SeriesSelect from '../components/form/SeriesSelect'\nimport { Series, ISeries } from '../data/models/Series';\nimport { IRecord } from '../data/models/Record'\n\nimport { UnitSelect } from '../components/form/UnitSelect';\nimport { ChartDemo } from '../components/chart/ChartDemo';\nimport { ExportData } from '../components/modal/ExportData';\nimport { ManageSeries } from '../components/modal/ManageSeries'\n\nconst { Title } = Typography\n\nconst SeriesDetails = () => {\n    const inputEl = useRef<Input>(null);\n    const [form] = Form.useForm();\n    const [, forceUpdate] = useState()\n    const [loading, setLoading] = useState<boolean>(true)\n    const [series, setSeries] = useState<ISeries>()\n    const [records, setRecords] = useState<IRecord[]>([])\n    const [unitName, setUnitName] = useState<string>()\n    let { id } = useParams()\n    const history = useHistory()\n\n    const loadAndSetSeries = async (series: ISeries) => {\n        const { id, timestamp, name, unitId } = series\n        setSeries(series)\n        const seriesClass = new Series(name, undefined, unitId, id, timestamp)\n        const fetchedRecords = await seriesClass.loadSeriesData()\n        if (seriesClass.unit) {\n            setUnitName(seriesClass.unit.name)\n        }\n        setLoading(false)\n\n        // this is a hack to draw points on the chart one by one.\n        // for whatever reason, if you pass the chart a \"n > 1\" array,\n        // subsequent array updates will blow away \n        fetchedRecords.reduce<IRecord[]>((accum, record) => {\n            accum = [...accum, record]\n            setRecords(accum)\n            return accum\n        }, [])\n    }\n    const focusInput = () => {\n        if (inputEl && inputEl.current) {\n            inputEl.current.focus()\n        }\n    }\n    useEffect(() => {\n        // setState(id)\n        const loadSeries = async (seriesId?: number | string) => {\n            setRecords([])\n            setSeries(undefined)\n            setUnitName(undefined)\n            setLoading(true)\n            forceUpdate({})\n            let series = await db.series.get(Number(seriesId))\n            if (!seriesId || !series) {\n                // no seriesId was passed in, see if there is a series to load\n                const allSeries = await db.series.toArray()\n                if (!allSeries || !allSeries[0]) {\n                    // nothing to load, send user to landing page\n                    history.push('/')\n                }\n                if (allSeries[0] && allSeries[0].id) {\n                    seriesId = allSeries[0].id\n                    series = allSeries[0]\n                    history.replace(`/series-details/${seriesId}`)\n                    loadSeries(seriesId)\n                }\n                return\n            }\n            await loadAndSetSeries(series)\n    \n            if (inputEl && inputEl.current) {\n                inputEl.current.focus()\n            }\n    \n        }\n        // setRecords([])\n        // setSeries(undefined)\n        // setUnitName(undefined)\n        // setLoading(true)\n        // forceUpdate({})\n        loadSeries(id)\n    }, [id, history])\n\n    const refreshData = (newId?: string) => {\n        // TODO cleanup this dupe logic, share with useEffect\n        const loadSeries = async (seriesId?: number | string) => {\n            setRecords([])\n            setSeries(undefined)\n            setUnitName(undefined)\n            setLoading(true)\n            forceUpdate({})\n            let series = await db.series.get(Number(seriesId))\n            if (!seriesId || !series) {\n                // no seriesId was passed in, see if there is a series to load\n                const allSeries = await db.series.toArray()\n                if (!allSeries || !allSeries[0]) {\n                    // nothing to load, send user to landing page\n                    history.push('/')\n                }\n                if (allSeries[0] && allSeries[0].id) {\n                    seriesId = allSeries[0].id\n                    series = allSeries[0]\n                    history.replace(`/series-details/${seriesId}`)\n                    loadSeries(seriesId)\n                }\n                return\n            }\n            await loadAndSetSeries(series)\n            focusInput()\n        }\n        const toLoad = newId ? newId : id\n        loadSeries(toLoad)\n    }\n\n    const onFinish = async (values: { amount?: string }) => {\n        if (!values.amount) {\n            return // shouldn't happen. for TS\n        }\n\n        const newRecord = {\n            seriesId: Number(id),\n            timestamp: new Date().toISOString(),\n            amount: values.amount\n        }\n        const recordId = await db.records.add(newRecord)\n        const updatedRecords = [...records, { id: recordId, ...newRecord }]\n        setRecords(updatedRecords)\n\n        form.resetFields() // clear form\n        focusInput()\n    };\n\n    const updateSeriesWithUnit = async ({ name, id: unitId }: { name: string, id: number }) => {\n        // callback for unit creation.\n        // update series with unitId\n        await db.series.update(Number(id), { unitId })\n        setUnitName(name)\n    }\n\n    return (\n        <div style={{ marginTop: '8px' }} >\n            <Spin spinning={loading} style={{ minHeight: 240 }}>\n                <Form\n                    form={form}\n                    name=\"new_record\"\n                    layout=\"inline\"\n                    onFinish={onFinish}\n                    style={{ display: 'flex', justifyContent: 'space-evenly' }}\n                >\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        {series ? (\n                            <SeriesSelect width={140} activeSeries={String(series.id)} form={form} />\n                        ) : <div style={{ width: 140 }}></div>}\n                        {unitName ? (\n                            <Form.Item\n                                name=\"amount\"\n                                rules={[{ required: true, message: 'needs value' }]}\n                                style={{ maxWidth: 110, margin: '0 4px' }}\n                            >\n                                <Input\n                                    size=\"small\"\n                                    ref={inputEl} // for auto-focus when the page loads\n                                    suffix={unitName}\n                                />\n                            </Form.Item>\n                        ) : (\n                                <UnitSelect width={110} selectionComplete={updateSeriesWithUnit} />\n                            )}\n                        <Form.Item\n                            shouldUpdate={true}\n                            style={{ margin: '0 4px' }}\n                        >\n                            {() => (\n                                <Button\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    size=\"small\"\n                                    shape=\"round\"\n                                    disabled={\n                                        !Boolean(form.getFieldValue('amount')) ||\n                                        Boolean(form.getFieldsError().filter(({ errors }) => errors.length).length)\n                                    }\n                                >\n                                    Log\n                                </Button>\n                            )}\n                        </Form.Item>\n\n                    </div>\n                    {series ? (\n                        <>\n                            <Form.Item style={{ margin: '0' }}>\n                                 <ManageSeries series={series} records={records} onClose={refreshData} />\n                            </Form.Item>\n                            <Form.Item style={{ margin: '0' }}>\n                                <ExportData series={series} records={records} />\n                            </Form.Item>\n                        </>\n                    ) : null}\n                </Form>\n                <div>\n                    {/* if records in state, show. else show placeholder. */}\n                    {records && records.length >= 1 ?\n                        <div id=\"overlay-container\">\n                            <RecordsDynamicLineChart\n                                records={records}\n                                height={190}\n                                width={window.innerWidth}\n                                lineColor=\"rgba(6, 85, 231, .8)\" // blue\n                            />\n                            {records.length === 1 ? (\n                                // if there is only one data point,\n                                // show an overlay to encourage the user\n                                <div id=\"overlay\">\n                                    <Typography>\n                                        <Title\n                                            level={4}\n                                            style={{\n                                                color: 'rgba(61, 61, 61, .3)',\n                                                position: 'relative',\n                                                top: 24,\n                                                left: 56\n                                            }}\n                                        >\n                                            <span\n                                                role=\"img\"\n                                                aria-label=\"finger pointing\"\n                                            >\n                                                👈\n                                            </span> nice.\n                                        </Title>\n                                        <Title\n                                            level={4}\n                                            style={{\n                                                color: 'rgba(61, 61, 61, .3)',\n                                                position: 'relative',\n                                                top: 16,\n                                                left: 80\n                                            }}\n                                        >\n                                            add another to see a trend\n                                        </Title>\n                                    </Typography>\n                                </div>\n                            ) : null}\n                        </div> :\n                        <ChartDemo\n                            width={window.innerWidth}\n                            height={190}\n                            lineColor=\"rgba(61, 61, 61, .3)\"\n                            overlay={`start your chart ☝!`}\n                        />\n                    }\n                </div>\n            </Spin>\n        </div>\n    )\n}\nexport default SeriesDetails\n","import React from 'react';\nimport './App.less';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport Landing from './containers/Landing'\nimport SeriesDetails from './containers/SeriesDetails'\n\nfunction App() {\n  return (\n      <Router>\n        <Switch>\n          <Route path=\"/series-details/:id\" >\n            <SeriesDetails />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}